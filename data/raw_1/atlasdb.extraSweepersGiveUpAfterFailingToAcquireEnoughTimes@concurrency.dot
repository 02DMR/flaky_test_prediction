digraph PDG {
label = "extraSweepersGiveUpAfterFailingToAcquireEnoughTimes <4...23>";
0.2 [style = filled, label = "int threads =  ( shards / ( ( sweepers / 2 )) ); <7>", fillcolor = white, shape = ellipse];
0.9 [style = filled, label = "Set<String> expectedLockIds = IntStream.range(0,shards).boxed().map(null).map(null).collect(Collectors.toSet()); <18...21>", fillcolor = white, shape = ellipse];
0.11 [style = filled, label = "Enter <4...23>", fillcolor = aquamarine, shape = diamond];
0.3 [style = filled, label = "TimelockService stickyLockService = createStickyLockService(); <8>", fillcolor = white, shape = ellipse];
0.7 [style = filled, label = "verify(stickyLockService,atMost( (  ( shards * ( (  ( ( ( threads + 1 )) * sweepers ) - shards )) ) -  (  ( sweepers * ( ( sweepers - 1 )) ) / 2 ) ))); <12>", fillcolor = white, shape = ellipse];
0.0 [style = filled, label = "int shards = 16; <5>", fillcolor = white, shape = ellipse];
0.1 [style = filled, label = "int sweepers = 4; <6>", fillcolor = white, shape = ellipse];
0.10 [style = filled, label = "assertThat(requestedLockIds).hasSameElementsAs(expectedLockIds); <22>", fillcolor = deeppink, shape = ellipse];
0.4 [style = filled, label = "createAndInitializeSweepersAndWaitForOneBackgroundIteration(sweepers,shards,threads,stickyLockService); <9>", fillcolor = white, shape = ellipse];
0.5 [style = filled, label = "ArgumentCaptor<LockRequest> captor = ArgumentCaptor.forClass(); <10>", fillcolor = white, shape = ellipse];
0.8 [style = filled, label = "Set<String> requestedLockIds = captor.getAllValues().stream().map(null).map(null).map(null).collect(Collectors.toSet()); <13...17>", fillcolor = white, shape = ellipse];
0.6 [style = filled, label = "verify(stickyLockService,atLeast( (  (  ( shards * ( (  ( shards / threads ) + 1 )) ) / 2 ) +  ( shards * ( (  ( threads * sweepers ) - shards )) ) ))); <11>", fillcolor = white, shape = ellipse];
0.0 -> 0.1 [style = bold, label=""];
0.0 -> 0.2 [style = solid, label="shards"];
0.0 -> 0.4 [style = solid, label="shards"];
0.0 -> 0.6 [style = solid, label="shards"];
0.0 -> 0.7 [style = solid, label="shards"];
0.0 -> 0.9 [style = solid, label="shards"];
0.1 -> 0.2 [style = solid, label="sweepers"];
0.1 -> 0.2 [style = bold, label=""];
0.1 -> 0.4 [style = solid, label="sweepers"];
0.1 -> 0.6 [style = solid, label="sweepers"];
0.1 -> 0.7 [style = solid, label="sweepers"];
0.2 -> 0.3 [style = bold, label=""];
0.2 -> 0.4 [style = solid, label="threads"];
0.2 -> 0.6 [style = solid, label="threads"];
0.2 -> 0.7 [style = solid, label="threads"];
0.3 -> 0.4 [style = solid, label="stickyLockService"];
0.3 -> 0.4 [style = bold, label=""];
0.3 -> 0.6 [style = solid, label="stickyLockService"];
0.3 -> 0.7 [style = solid, label="stickyLockService"];
0.4 -> 0.5 [style = bold, label=""];
0.5 -> 0.6 [style = bold, label=""];
0.5 -> 0.8 [style = solid, label="captor"];
0.6 -> 0.7 [style = bold, label=""];
0.7 -> 0.8 [style = bold, label=""];
0.8 -> 0.9 [style = bold, label=""];
0.8 -> 0.10 [style = solid, label="requestedLockIds"];
0.9 -> 0.10 [style = solid, label="expectedLockIds"];
0.9 -> 0.10 [style = bold, label=""];
0.11 -> 0.0 [style = dotted, label="true"];
0.11 -> 0.0 [style = bold, label=""];
0.11 -> 0.1 [style = dotted, label="true"];
0.11 -> 0.2 [style = dotted, label="true"];
0.11 -> 0.3 [style = dotted, label="true"];
0.11 -> 0.4 [style = dotted, label="true"];
0.11 -> 0.5 [style = dotted, label="true"];
0.11 -> 0.6 [style = dotted, label="true"];
0.11 -> 0.7 [style = dotted, label="true"];
0.11 -> 0.8 [style = dotted, label="true"];
0.11 -> 0.9 [style = dotted, label="true"];
0.11 -> 0.10 [style = dotted, label="true"];
}
