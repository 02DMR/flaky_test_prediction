digraph PDG {
label = "testExpiredRequestAllocationOnAnyHost <3...26>";
0.0 [style = filled, label = "MockClusterResourceManager spyManager = spy(new MockClusterResourceManager(callback,state)); <4>", fillcolor = white, shape = ellipse];
0.8 [style = filled, label = "assertTrue( ( state.expiredPreferredHostRequests.get() == 2 )); <17>", fillcolor = white, shape = ellipse];
0.16 [style = filled, label = "spyAllocator.stop(); <25>", fillcolor = deeppink, shape = ellipse];
0.7 [style = filled, label = "assertTrue( ( state.preferredHostRequests.get() == 2 )); <16>", fillcolor = white, shape = ellipse];
0.12 [style = filled, label = "verify(spyManager,atLeast(2)).cancelResourceRequest(cancelledRequestCaptor.capture()); <21>", fillcolor = white, shape = ellipse];
0.17 [style = filled, label = "Enter <3...26>", fillcolor = aquamarine, shape = diamond];
0.1 [style = filled, label = "ContainerManager spyContainerManager = spy(new ContainerManager(containerPlacementMetadataStore,state,spyManager,true,false,mock(),faultDomainManager,config)); <5>", fillcolor = white, shape = ellipse];
0.3 [style = filled, label = "spyAllocator.requestResources(new HashMap<String,String>(){
}); <7...12>", fillcolor = white, shape = ellipse];
0.9 [style = filled, label = "verify(spyContainerManager,times(1)).handleExpiredRequest(eq(\"0\"),eq(\"hostname-0\"),any(),any(),any()); <18>", fillcolor = white, shape = ellipse];
0.2 [style = filled, label = "spyAllocator = Mockito.spy(new ContainerAllocator(spyManager,config,state,true,spyContainerManager)); <6>", fillcolor = white, shape = ellipse];
0.5 [style = filled, label = "spyAllocatorThread.start(); <14>", fillcolor = white, shape = ellipse];
0.14 [style = filled, label = "assertTrue( ( state.matchedResourceRequests.get() == 0 )); <23>", fillcolor = white, shape = ellipse];
0.4 [style = filled, label = "spyAllocatorThread = new Thread(spyAllocator); <13>", fillcolor = white, shape = ellipse];
0.6 [style = filled, label = "Thread.sleep(1000); <15>", fillcolor = white, shape = ellipse];
0.10 [style = filled, label = "verify(spyContainerManager,times(1)).handleExpiredRequest(eq(\"1\"),eq(\"hostname-1\"),any(),any(),any()); <19>", fillcolor = white, shape = ellipse];
0.13 [style = filled, label = "assertTrue( ( cancelledRequestCaptor.getAllValues().stream().map(null).collect(Collectors.toSet()).size() > 2 )); <22>", fillcolor = white, shape = ellipse];
0.11 [style = filled, label = "ArgumentCaptor<SamzaResourceRequest> cancelledRequestCaptor = ArgumentCaptor.forClass(); <20>", fillcolor = white, shape = ellipse];
0.15 [style = filled, label = "assertTrue( ( state.anyHostRequests.get() > 2 )); <24>", fillcolor = white, shape = ellipse];
0.0 -> 0.1 [style = solid, label="spyManager"];
0.0 -> 0.1 [style = bold, label=""];
0.0 -> 0.2 [style = solid, label="spyManager"];
0.0 -> 0.12 [style = solid, label="spyManager"];
0.1 -> 0.2 [style = solid, label="spyContainerManager"];
0.1 -> 0.2 [style = bold, label=""];
0.1 -> 0.9 [style = solid, label="spyContainerManager"];
0.1 -> 0.10 [style = solid, label="spyContainerManager"];
0.2 -> 0.3 [style = solid, label="spyAllocator"];
0.2 -> 0.3 [style = bold, label=""];
0.2 -> 0.4 [style = solid, label="spyAllocator"];
0.2 -> 0.16 [style = solid, label="spyAllocator"];
0.3 -> 0.4 [style = solid, label="spyAllocator"];
0.3 -> 0.4 [style = bold, label=""];
0.3 -> 0.16 [style = solid, label="spyAllocator"];
0.4 -> 0.5 [style = solid, label="spyAllocatorThread"];
0.4 -> 0.5 [style = bold, label=""];
0.5 -> 0.6 [style = bold, label=""];
0.6 -> 0.7 [style = bold, label=""];
0.7 -> 0.8 [style = bold, label=""];
0.8 -> 0.9 [style = bold, label=""];
0.9 -> 0.10 [style = bold, label=""];
0.10 -> 0.11 [style = bold, label=""];
0.11 -> 0.12 [style = solid, label="cancelledRequestCaptor"];
0.11 -> 0.12 [style = bold, label=""];
0.11 -> 0.13 [style = solid, label="cancelledRequestCaptor"];
0.12 -> 0.13 [style = bold, label=""];
0.13 -> 0.14 [style = bold, label=""];
0.14 -> 0.15 [style = bold, label=""];
0.15 -> 0.16 [style = bold, label=""];
0.17 -> 0.0 [style = dotted, label="true"];
0.17 -> 0.0 [style = bold, label=""];
0.17 -> 0.1 [style = dotted, label="true"];
0.17 -> 0.2 [style = dotted, label="true"];
0.17 -> 0.3 [style = dotted, label="true"];
0.17 -> 0.4 [style = dotted, label="true"];
0.17 -> 0.5 [style = dotted, label="true"];
0.17 -> 0.6 [style = dotted, label="true"];
0.17 -> 0.7 [style = dotted, label="true"];
0.17 -> 0.8 [style = dotted, label="true"];
0.17 -> 0.9 [style = dotted, label="true"];
0.17 -> 0.10 [style = dotted, label="true"];
0.17 -> 0.11 [style = dotted, label="true"];
0.17 -> 0.12 [style = dotted, label="true"];
0.17 -> 0.13 [style = dotted, label="true"];
0.17 -> 0.14 [style = dotted, label="true"];
0.17 -> 0.15 [style = dotted, label="true"];
0.17 -> 0.16 [style = dotted, label="true"];
}
