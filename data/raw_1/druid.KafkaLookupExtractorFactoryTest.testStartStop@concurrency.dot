digraph PDG {
label = "testStartStop <3...35>";
0.20 [style = filled, label = "Enter <3...35>", fillcolor = aquamarine, shape = diamond];
0.2 [style = filled, label = "final ConsumerConnector consumerConnector = PowerMock.createStrictMock(); <6>", fillcolor = white, shape = ellipse];
0.16 [style = filled, label = "Assert.assertTrue(factory.close()); <31>", fillcolor = white, shape = ellipse];
0.1 [style = filled, label = "final ConsumerIterator<String,String> consumerIterator = PowerMock.createStrictMock(); <5>", fillcolor = white, shape = ellipse];
0.13 [style = filled, label = "PowerMock.replay(cacheManager,cacheHandler,kafkaStream,consumerConnector,consumerIterator); <23>", fillcolor = white, shape = ellipse];
0.12 [style = filled, label = "EasyMock.expectLastCall().andAnswer(new IAnswer<Object>(){
@Override public Object answer ( ) {
threadWasInterrupted.set(Thread.currentThread().isInterrupted());
return null;
}}).times(2); <16...22>", fillcolor = white, shape = ellipse];
0.0 [style = filled, label = "final KafkaStream<String,String> kafkaStream = PowerMock.createStrictMock(); <4>", fillcolor = white, shape = ellipse];
0.11 [style = filled, label = "consumerConnector.shutdown(); <15>", fillcolor = white, shape = ellipse];
0.15 [style = filled, label = "Assert.assertTrue(factory.start()); <30>", fillcolor = white, shape = ellipse];
0.19 [style = filled, label = "PowerMock.verify(cacheManager,cacheHandler); <34>", fillcolor = deeppink, shape = ellipse];
0.8 [style = filled, label = "cacheHandler.close(); <12>", fillcolor = white, shape = ellipse];
0.7 [style = filled, label = "EasyMock.expect(cacheHandler.getCache()).andReturn(new ConcurrentHashMap<String,String>()).once(); <11>", fillcolor = white, shape = ellipse];
0.14 [style = filled, label = "final KafkaLookupExtractorFactory factory = new KafkaLookupExtractorFactory(cacheManager,TOPIC,ImmutableMap.of(\"zookeeper.connect\",\"localhost\"),10000L,false){
@Override ConsumerConnector buildConnector (Properties properties  ) {
return consumerConnector;
}}; <24...29>", fillcolor = white, shape = ellipse];
0.18 [style = filled, label = "Assert.assertFalse(threadWasInterrupted.get()); <33>", fillcolor = white, shape = ellipse];
0.5 [style = filled, label = "EasyMock.expect(consumerIterator.hasNext()).andAnswer(getBlockingAnswer()).anyTimes(); <9>", fillcolor = white, shape = ellipse];
0.3 [style = filled, label = "EasyMock.expect(consumerConnector.createMessageStreamsByFilter(EasyMock.anyObject(),EasyMock.anyInt(),EasyMock.eq(DEFAULT_STRING_DECODER),EasyMock.eq(DEFAULT_STRING_DECODER))).andReturn(ImmutableList.of(kafkaStream)).once(); <7>", fillcolor = white, shape = ellipse];
0.4 [style = filled, label = "EasyMock.expect(kafkaStream.iterator()).andReturn(consumerIterator).anyTimes(); <8>", fillcolor = white, shape = ellipse];
0.6 [style = filled, label = "EasyMock.expect(cacheManager.createCache()).andReturn(cacheHandler).once(); <10>", fillcolor = white, shape = ellipse];
0.10 [style = filled, label = "final AtomicBoolean threadWasInterrupted = new AtomicBoolean(false); <14>", fillcolor = white, shape = ellipse];
0.17 [style = filled, label = "Assert.assertTrue(factory.getFuture().isDone()); <32>", fillcolor = white, shape = ellipse];
0.9 [style = filled, label = "EasyMock.expectLastCall(); <13>", fillcolor = white, shape = ellipse];
0.0 -> 0.1 [style = bold, label=""];
0.0 -> 0.3 [style = solid, label="kafkaStream"];
0.0 -> 0.4 [style = solid, label="kafkaStream"];
0.0 -> 0.13 [style = solid, label="kafkaStream"];
0.1 -> 0.2 [style = bold, label=""];
0.1 -> 0.4 [style = solid, label="consumerIterator"];
0.1 -> 0.5 [style = solid, label="consumerIterator"];
0.1 -> 0.13 [style = solid, label="consumerIterator"];
0.2 -> 0.3 [style = solid, label="consumerConnector"];
0.2 -> 0.3 [style = bold, label=""];
0.2 -> 0.11 [style = solid, label="consumerConnector"];
0.2 -> 0.13 [style = solid, label="consumerConnector"];
0.2 -> 0.14 [style = solid, label="consumerConnector"];
0.3 -> 0.4 [style = bold, label=""];
0.4 -> 0.5 [style = bold, label=""];
0.5 -> 0.6 [style = bold, label=""];
0.6 -> 0.7 [style = bold, label=""];
0.7 -> 0.8 [style = bold, label=""];
0.8 -> 0.9 [style = bold, label=""];
0.8 -> 0.13 [style = solid, label="cacheHandler"];
0.8 -> 0.19 [style = solid, label="cacheHandler"];
0.9 -> 0.10 [style = bold, label=""];
0.10 -> 0.11 [style = bold, label=""];
0.10 -> 0.12 [style = solid, label="threadWasInterrupted"];
0.10 -> 0.18 [style = solid, label="threadWasInterrupted"];
0.11 -> 0.12 [style = bold, label=""];
0.11 -> 0.13 [style = solid, label="consumerConnector"];
0.11 -> 0.14 [style = solid, label="consumerConnector"];
0.12 -> 0.13 [style = bold, label=""];
0.13 -> 0.14 [style = bold, label=""];
0.14 -> 0.15 [style = solid, label="factory"];
0.14 -> 0.15 [style = bold, label=""];
0.14 -> 0.16 [style = solid, label="factory"];
0.14 -> 0.17 [style = solid, label="factory"];
0.15 -> 0.16 [style = bold, label=""];
0.16 -> 0.17 [style = bold, label=""];
0.17 -> 0.18 [style = bold, label=""];
0.18 -> 0.19 [style = bold, label=""];
0.20 -> 0.0 [style = dotted, label="true"];
0.20 -> 0.0 [style = bold, label=""];
0.20 -> 0.1 [style = dotted, label="true"];
0.20 -> 0.2 [style = dotted, label="true"];
0.20 -> 0.3 [style = dotted, label="true"];
0.20 -> 0.4 [style = dotted, label="true"];
0.20 -> 0.5 [style = dotted, label="true"];
0.20 -> 0.6 [style = dotted, label="true"];
0.20 -> 0.7 [style = dotted, label="true"];
0.20 -> 0.8 [style = dotted, label="true"];
0.20 -> 0.9 [style = dotted, label="true"];
0.20 -> 0.10 [style = dotted, label="true"];
0.20 -> 0.11 [style = dotted, label="true"];
0.20 -> 0.12 [style = dotted, label="true"];
0.20 -> 0.13 [style = dotted, label="true"];
0.20 -> 0.14 [style = dotted, label="true"];
0.20 -> 0.15 [style = dotted, label="true"];
0.20 -> 0.16 [style = dotted, label="true"];
0.20 -> 0.17 [style = dotted, label="true"];
0.20 -> 0.18 [style = dotted, label="true"];
0.20 -> 0.19 [style = dotted, label="true"];
}
