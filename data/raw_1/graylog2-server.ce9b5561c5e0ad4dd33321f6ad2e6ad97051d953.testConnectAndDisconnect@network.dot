digraph PDG {
label = "testConnectAndDisconnect <3...29>";
0.13 [style = filled, label = "assertThat(connectionCounter.getTotalConnections()).isEqualTo(1L); <27>", fillcolor = white, shape = ellipse];
0.1 [style = filled, label = "assertThat(connectionCounter.getConnectionCount()).isEqualTo(0); <5>", fillcolor = white, shape = ellipse];
0.3 [style = filled, label = "final ChannelFuture connectFuture = new Bootstrap().group(clientEventLoopGroup).channel().handler(new LoggingHandler()).localAddress(InetAddress.getLocalHost(),0).connect(serverChannel.localAddress()).sync(); <8...14>", fillcolor = white, shape = ellipse];
0.9 [style = filled, label = "assertThat(connectionCounter.getConnectionCount()).isEqualTo(1); <20>", fillcolor = white, shape = ellipse];
0.10 [style = filled, label = "clientChannel.close().syncUninterruptibly(); <21>", fillcolor = white, shape = ellipse];
0.11 [style = filled, label = "{
clientEventLoopGroup.shutdownGracefully();
clientEventLoopGroup.awaitTermination(1,TimeUnit.SECONDS);
} <22...25>", fillcolor = white, shape = ellipse];
0.7 [style = filled, label = "readCompleteLatch.await(LATCH_TIMEOUT,TimeUnit.SECONDS); <18>", fillcolor = white, shape = ellipse];
0.4 [style = filled, label = "final Channel clientChannel = connectFuture.channel(); <15>", fillcolor = white, shape = ellipse];
0.5 [style = filled, label = "assertThat(clientChannel.isWritable()).isTrue(); <16>", fillcolor = white, shape = ellipse];
0.15 [style = filled, label = "Enter <3...29>", fillcolor = aquamarine, shape = diamond];
0.2 [style = filled, label = "final EventLoopGroup clientEventLoopGroup = new NioEventLoopGroup(1); <6>", fillcolor = white, shape = ellipse];
0.6 [style = filled, label = "clientChannel.writeAndFlush(Unpooled.wrappedBuffer(\"canary\".getBytes(StandardCharsets.UTF_8))).syncUninterruptibly(); <17>", fillcolor = white, shape = ellipse];
0.8 [style = filled, label = "assertThat(connectionCounter.getTotalConnections()).isEqualTo(1L); <19>", fillcolor = white, shape = ellipse];
0.12 [style = filled, label = "disconnectedLatch.await(LATCH_TIMEOUT,TimeUnit.SECONDS); <26>", fillcolor = white, shape = ellipse];
0.0 [style = filled, label = "assertThat(connectionCounter.getTotalConnections()).isEqualTo(0L); <4>", fillcolor = white, shape = ellipse];
0.14 [style = filled, label = "assertThat(connectionCounter.getConnectionCount()).isEqualTo(0); <28>", fillcolor = deeppink, shape = ellipse];
0.0 -> 0.1 [style = bold, label=""];
0.1 -> 0.2 [style = bold, label=""];
0.2 -> 0.3 [style = solid, label="clientEventLoopGroup"];
0.2 -> 0.3 [style = bold, label=""];
0.2 -> 0.11 [style = solid, label="clientEventLoopGroup"];
0.3 -> 0.4 [style = solid, label="connectFuture"];
0.3 -> 0.4 [style = bold, label=""];
0.4 -> 0.5 [style = solid, label="clientChannel"];
0.4 -> 0.5 [style = bold, label=""];
0.4 -> 0.6 [style = solid, label="clientChannel"];
0.4 -> 0.10 [style = solid, label="clientChannel"];
0.5 -> 0.6 [style = bold, label=""];
0.6 -> 0.7 [style = bold, label=""];
0.7 -> 0.8 [style = bold, label=""];
0.8 -> 0.9 [style = bold, label=""];
0.9 -> 0.10 [style = bold, label=""];
0.10 -> 0.11 [style = bold, label=""];
0.11 -> 0.12 [style = bold, label=""];
0.12 -> 0.13 [style = bold, label=""];
0.13 -> 0.14 [style = bold, label=""];
0.15 -> 0.0 [style = dotted, label="true"];
0.15 -> 0.0 [style = bold, label=""];
0.15 -> 0.1 [style = dotted, label="true"];
0.15 -> 0.2 [style = dotted, label="true"];
0.15 -> 0.3 [style = dotted, label="true"];
0.15 -> 0.4 [style = dotted, label="true"];
0.15 -> 0.5 [style = dotted, label="true"];
0.15 -> 0.6 [style = dotted, label="true"];
0.15 -> 0.7 [style = dotted, label="true"];
0.15 -> 0.8 [style = dotted, label="true"];
0.15 -> 0.9 [style = dotted, label="true"];
0.15 -> 0.10 [style = dotted, label="true"];
0.15 -> 0.12 [style = dotted, label="true"];
0.15 -> 0.13 [style = dotted, label="true"];
0.15 -> 0.14 [style = dotted, label="true"];
}
