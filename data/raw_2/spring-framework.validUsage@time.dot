digraph PDG {
label = "validUsage <3...28>";
0.8 [style = filled, label = "assertThat(stopWatch.getTotalTimeMillis()).as(\"total time in milliseconds for tasks #1 and #2\").isGreaterThanOrEqualTo( (  ( duration1 + duration2 ) - fudgeFactor )).isLessThanOrEqualTo( ( duration1 + duration2 ) + fudgeFactor); <15...18>", fillcolor = white, shape = ellipse];
0.11 [style = filled, label = "assertThat(stopWatch.prettyPrint()).contains(name1,name2); <24>", fillcolor = white, shape = ellipse];
0.5 [style = filled, label = "stopWatch.stop(); <9>", fillcolor = white, shape = ellipse];
0.14 [style = filled, label = "assertThat(stopWatch.getId()).isEqualTo(ID); <27>", fillcolor = deeppink, shape = ellipse];
0.2 [style = filled, label = "Thread.sleep(duration1); <6>", fillcolor = white, shape = ellipse];
0.7 [style = filled, label = "assertThat(stopWatch.getLastTaskTimeNanos()).as(\"last task time in nanoseconds for task #2\").isGreaterThanOrEqualTo(millisToNanos(duration2)).isLessThanOrEqualTo(millisToNanos( ( duration2 + fudgeFactor ))); <11...14>", fillcolor = white, shape = ellipse];
0.0 [style = filled, label = "assertThat(stopWatch.isRunning()).isFalse(); <4>", fillcolor = white, shape = ellipse];
0.3 [style = filled, label = "assertThat(stopWatch.isRunning()).isTrue(); <7>", fillcolor = white, shape = ellipse];
0.13 [style = filled, label = "assertThat(stopWatch.toString()).contains(ID,name1,name2); <26>", fillcolor = white, shape = ellipse];
0.6 [style = filled, label = "assertThat(stopWatch.isRunning()).isFalse(); <10>", fillcolor = white, shape = ellipse];
0.10 [style = filled, label = "assertThat(stopWatch.getTaskCount()).isEqualTo(2); <23>", fillcolor = white, shape = ellipse];
0.4 [style = filled, label = "assertThat(stopWatch.currentTaskName()).isEqualTo(name1); <8>", fillcolor = white, shape = ellipse];
0.1 [style = filled, label = "stopWatch.start(name1); <5>", fillcolor = white, shape = ellipse];
0.9 [style = filled, label = "assertThat(stopWatch.getTotalTimeSeconds()).as(\"total time in seconds for task #2\").isGreaterThanOrEqualTo( ( ( (  ( duration1 + duration2 ) - fudgeFactor )) / 1000.0 )).isLessThanOrEqualTo( ( ( ( duration1 + duration2 ) + fudgeFactor) / 1000.0 )); <19...22>", fillcolor = white, shape = ellipse];
0.12 [style = filled, label = "assertThat(stopWatch.getTaskInfo()).extracting(null).containsExactly(name1,name2); <25>", fillcolor = white, shape = ellipse];
0.15 [style = filled, label = "Enter <3...28>", fillcolor = aquamarine, shape = diamond];
0.0 -> 0.1 [style = bold, label=""];
0.1 -> 0.2 [style = bold, label=""];
0.1 -> 0.3 [style = solid, label="stopWatch"];
0.1 -> 0.4 [style = solid, label="stopWatch"];
0.1 -> 0.5 [style = solid, label="stopWatch"];
0.1 -> 0.6 [style = solid, label="stopWatch"];
0.1 -> 0.7 [style = solid, label="stopWatch"];
0.1 -> 0.8 [style = solid, label="stopWatch"];
0.1 -> 0.9 [style = solid, label="stopWatch"];
0.1 -> 0.10 [style = solid, label="stopWatch"];
0.1 -> 0.11 [style = solid, label="stopWatch"];
0.1 -> 0.12 [style = solid, label="stopWatch"];
0.1 -> 0.13 [style = solid, label="stopWatch"];
0.1 -> 0.14 [style = solid, label="stopWatch"];
0.2 -> 0.3 [style = bold, label=""];
0.3 -> 0.4 [style = bold, label=""];
0.4 -> 0.5 [style = bold, label=""];
0.5 -> 0.6 [style = solid, label="stopWatch"];
0.5 -> 0.6 [style = bold, label=""];
0.5 -> 0.7 [style = solid, label="stopWatch"];
0.5 -> 0.8 [style = solid, label="stopWatch"];
0.5 -> 0.9 [style = solid, label="stopWatch"];
0.5 -> 0.10 [style = solid, label="stopWatch"];
0.5 -> 0.11 [style = solid, label="stopWatch"];
0.5 -> 0.12 [style = solid, label="stopWatch"];
0.5 -> 0.13 [style = solid, label="stopWatch"];
0.5 -> 0.14 [style = solid, label="stopWatch"];
0.6 -> 0.7 [style = bold, label=""];
0.7 -> 0.8 [style = bold, label=""];
0.8 -> 0.9 [style = bold, label=""];
0.9 -> 0.10 [style = bold, label=""];
0.10 -> 0.11 [style = bold, label=""];
0.11 -> 0.12 [style = bold, label=""];
0.12 -> 0.13 [style = bold, label=""];
0.13 -> 0.14 [style = bold, label=""];
0.15 -> 0.0 [style = dotted, label="true"];
0.15 -> 0.0 [style = bold, label=""];
0.15 -> 0.1 [style = dotted, label="true"];
0.15 -> 0.2 [style = dotted, label="true"];
0.15 -> 0.3 [style = dotted, label="true"];
0.15 -> 0.4 [style = dotted, label="true"];
0.15 -> 0.5 [style = dotted, label="true"];
0.15 -> 0.6 [style = dotted, label="true"];
0.15 -> 0.7 [style = dotted, label="true"];
0.15 -> 0.8 [style = dotted, label="true"];
0.15 -> 0.9 [style = dotted, label="true"];
0.15 -> 0.10 [style = dotted, label="true"];
0.15 -> 0.11 [style = dotted, label="true"];
0.15 -> 0.12 [style = dotted, label="true"];
0.15 -> 0.13 [style = dotted, label="true"];
0.15 -> 0.14 [style = dotted, label="true"];
}
