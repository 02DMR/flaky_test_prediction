digraph PDG {
label = "create_repo_and_uploads_commits <3...28>";
0.20 [style = filled, label = "CoverageComputedEvent coverageRound2 = coverageComputedEvents.get(1); <24>", fillcolor = white, shape = ellipse];
0.4 [style = filled, label = "S3Event s3Event = localS3Bucket.putObject(srcsForTestChallenge.asFile(),s3destination); <8>", fillcolor = white, shape = ellipse];
0.1 [style = filled, label = "String participantId = generateId(); <5>", fillcolor = white, shape = ellipse];
0.21 [style = filled, label = "assertThat(coverageRound2.getParticipant(),equalTo(participantId)); <25>", fillcolor = white, shape = ellipse];
0.23 [style = filled, label = "assertThat(coverageRound2.getCoverage(),equalTo(44)); <27>", fillcolor = deeppink, shape = ellipse];
0.18 [style = filled, label = "assertThat(coverageRound1.getRoundId(),equalTo( ( challengeId + \"_R1\" ))); <22>", fillcolor = white, shape = ellipse];
0.12 [style = filled, label = "assertThat(languageEvent.getProgrammingLanguage(),equalTo(\"HmmmLang\")); <16>", fillcolor = white, shape = ellipse];
0.13 [style = filled, label = "assertThat(coverageComputedEvents.size(),equalTo(2)); <17>", fillcolor = white, shape = ellipse];
0.16 [style = filled, label = "CoverageComputedEvent coverageRound1 = coverageComputedEvents.get(0); <20>", fillcolor = white, shape = ellipse];
0.9 [style = filled, label = "ProgrammingLanguageDetectedEvent languageEvent = languageDetectedEvents.get(0); <13>", fillcolor = white, shape = ellipse];
0.19 [style = filled, label = "assertThat(coverageRound1.getCoverage(),equalTo(33)); <23>", fillcolor = white, shape = ellipse];
0.24 [style = filled, label = "Enter <3...28>", fillcolor = aquamarine, shape = diamond];
0.11 [style = filled, label = "assertThat(languageEvent.getChallengeId(),equalTo(challengeId)); <15>", fillcolor = white, shape = ellipse];
0.15 [style = filled, label = "coverageComputedEvents.sort(Comparator.comparing(null)); <19>", fillcolor = white, shape = ellipse];
0.22 [style = filled, label = "assertThat(coverageRound2.getRoundId(),equalTo( ( challengeId + \"_R2\" ))); <26>", fillcolor = white, shape = ellipse];
0.6 [style = filled, label = "waitForQueueToReceiveEvents(); <10>", fillcolor = white, shape = ellipse];
0.10 [style = filled, label = "assertThat(languageEvent.getParticipant(),equalTo(participantId)); <14>", fillcolor = white, shape = ellipse];
0.8 [style = filled, label = "System.out.println( ( \"Received language detected events: \" + languageDetectedEvents )); <12>", fillcolor = white, shape = ellipse];
0.7 [style = filled, label = "assertThat(languageDetectedEvents.size(),equalTo(1)); <11>", fillcolor = white, shape = ellipse];
0.17 [style = filled, label = "assertThat(coverageRound1.getParticipant(),equalTo(participantId)); <21>", fillcolor = white, shape = ellipse];
0.3 [style = filled, label = "TestSrcsFile srcsForTestChallenge = new TestSrcsFile(\"HmmmLang_R1Cov33_R2Cov44.srcs\"); <7>", fillcolor = white, shape = ellipse];
0.0 [style = filled, label = "String challengeId = \"TCH\"; <4>", fillcolor = white, shape = ellipse];
0.14 [style = filled, label = "System.out.println( ( \"Received coverage events: \" + coverageComputedEvents )); <18>", fillcolor = white, shape = ellipse];
0.2 [style = filled, label = "String s3destination = String.format(\"%s/%s/file.srcs\",challengeId,participantId); <6>", fillcolor = white, shape = ellipse];
0.5 [style = filled, label = "coverageUploadHandler.handleRequest(convertToMap(wrapAsSNSEvent(s3Event)),NO_CONTEXT); <9>", fillcolor = white, shape = ellipse];
0.0 -> 0.1 [style = bold, label=""];
0.0 -> 0.2 [style = solid, label="challengeId"];
0.0 -> 0.11 [style = solid, label="challengeId"];
0.0 -> 0.18 [style = solid, label="challengeId"];
0.0 -> 0.22 [style = solid, label="challengeId"];
0.1 -> 0.2 [style = solid, label="participantId"];
0.1 -> 0.2 [style = bold, label=""];
0.1 -> 0.10 [style = solid, label="participantId"];
0.1 -> 0.17 [style = solid, label="participantId"];
0.1 -> 0.21 [style = solid, label="participantId"];
0.2 -> 0.3 [style = bold, label=""];
0.2 -> 0.4 [style = solid, label="s3destination"];
0.3 -> 0.4 [style = solid, label="srcsForTestChallenge"];
0.3 -> 0.4 [style = bold, label=""];
0.4 -> 0.5 [style = solid, label="s3Event"];
0.4 -> 0.5 [style = bold, label=""];
0.5 -> 0.6 [style = bold, label=""];
0.6 -> 0.7 [style = bold, label=""];
0.7 -> 0.8 [style = bold, label=""];
0.8 -> 0.9 [style = bold, label=""];
0.9 -> 0.10 [style = solid, label="languageEvent"];
0.9 -> 0.10 [style = bold, label=""];
0.9 -> 0.11 [style = solid, label="languageEvent"];
0.9 -> 0.12 [style = solid, label="languageEvent"];
0.10 -> 0.11 [style = bold, label=""];
0.11 -> 0.12 [style = bold, label=""];
0.12 -> 0.13 [style = bold, label=""];
0.13 -> 0.14 [style = bold, label=""];
0.14 -> 0.15 [style = bold, label=""];
0.15 -> 0.16 [style = solid, label="coverageComputedEvents"];
0.15 -> 0.16 [style = bold, label=""];
0.15 -> 0.20 [style = solid, label="coverageComputedEvents"];
0.16 -> 0.17 [style = solid, label="coverageRound1"];
0.16 -> 0.17 [style = bold, label=""];
0.16 -> 0.18 [style = solid, label="coverageRound1"];
0.16 -> 0.19 [style = solid, label="coverageRound1"];
0.17 -> 0.18 [style = bold, label=""];
0.18 -> 0.19 [style = bold, label=""];
0.19 -> 0.20 [style = bold, label=""];
0.20 -> 0.21 [style = solid, label="coverageRound2"];
0.20 -> 0.21 [style = bold, label=""];
0.20 -> 0.22 [style = solid, label="coverageRound2"];
0.20 -> 0.23 [style = solid, label="coverageRound2"];
0.21 -> 0.22 [style = bold, label=""];
0.22 -> 0.23 [style = bold, label=""];
0.24 -> 0.0 [style = dotted, label="true"];
0.24 -> 0.0 [style = bold, label=""];
0.24 -> 0.1 [style = dotted, label="true"];
0.24 -> 0.2 [style = dotted, label="true"];
0.24 -> 0.3 [style = dotted, label="true"];
0.24 -> 0.4 [style = dotted, label="true"];
0.24 -> 0.5 [style = dotted, label="true"];
0.24 -> 0.6 [style = dotted, label="true"];
0.24 -> 0.7 [style = dotted, label="true"];
0.24 -> 0.8 [style = dotted, label="true"];
0.24 -> 0.9 [style = dotted, label="true"];
0.24 -> 0.10 [style = dotted, label="true"];
0.24 -> 0.11 [style = dotted, label="true"];
0.24 -> 0.12 [style = dotted, label="true"];
0.24 -> 0.13 [style = dotted, label="true"];
0.24 -> 0.14 [style = dotted, label="true"];
0.24 -> 0.15 [style = dotted, label="true"];
0.24 -> 0.16 [style = dotted, label="true"];
0.24 -> 0.17 [style = dotted, label="true"];
0.24 -> 0.18 [style = dotted, label="true"];
0.24 -> 0.19 [style = dotted, label="true"];
0.24 -> 0.20 [style = dotted, label="true"];
0.24 -> 0.21 [style = dotted, label="true"];
0.24 -> 0.22 [style = dotted, label="true"];
0.24 -> 0.23 [style = dotted, label="true"];
}
