digraph PDG {
label = "logWithExtras <3...18>";
0.9 [style = filled, label = "assertThat(logData.getSeverityText()).isEqualTo(\"INFO\"); <13>", fillcolor = white, shape = ellipse];
0.10 [style = filled, label = "assertThat(logData.getAttributes().size()).isEqualTo(3); <14>", fillcolor = white, shape = ellipse];
0.3 [style = filled, label = "LogData logData = logDataList.get(0); <7>", fillcolor = white, shape = ellipse];
0.5 [style = filled, label = "assertThat(logData.getInstrumentationLibraryInfo()).isEqualTo(instrumentationLibraryInfo); <9>", fillcolor = white, shape = ellipse];
0.6 [style = filled, label = "assertThat(logData.getBody().asString()).isEqualTo(\"log message 1\"); <10>", fillcolor = white, shape = ellipse];
0.1 [style = filled, label = "List<LogData> logDataList = logExporter.getFinishedLogItems(); <5>", fillcolor = white, shape = ellipse];
0.4 [style = filled, label = "assertThat(logData.getResource()).isEqualTo(resource); <8>", fillcolor = white, shape = ellipse];
0.13 [style = filled, label = "assertThat(logData.getAttributes().get(EXCEPTION_STACKTRACE)).contains(\"logWithExtras\"); <17>", fillcolor = deeppink, shape = ellipse];
0.2 [style = filled, label = "assertThat(logDataList).hasSize(1); <6>", fillcolor = white, shape = ellipse];
0.11 [style = filled, label = "assertThat(logData.getAttributes().get(EXCEPTION_TYPE)).isEqualTo(.getName()); <15>", fillcolor = white, shape = ellipse];
0.0 [style = filled, label = "Instant start = Instant.now(); <4>", fillcolor = white, shape = ellipse];
0.8 [style = filled, label = "assertThat(logData.getSeverity()).isEqualTo(INFO); <12>", fillcolor = white, shape = ellipse];
0.12 [style = filled, label = "assertThat(logData.getAttributes().get(EXCEPTION_MESSAGE)).isEqualTo(\"Error!\"); <16>", fillcolor = white, shape = ellipse];
0.14 [style = filled, label = "Enter <3...18>", fillcolor = aquamarine, shape = diamond];
0.7 [style = filled, label = "assertThat(logData.getEpochNanos()).isGreaterThanOrEqualTo(TimeUnit.MILLISECONDS.toNanos(start.toEpochMilli())).isLessThanOrEqualTo(TimeUnit.MILLISECONDS.toNanos(Instant.now().toEpochMilli())); <11>", fillcolor = white, shape = ellipse];
0.0 -> 0.1 [style = bold, label=""];
0.0 -> 0.7 [style = solid, label="start"];
0.1 -> 0.2 [style = solid, label="logDataList"];
0.1 -> 0.2 [style = bold, label=""];
0.1 -> 0.3 [style = solid, label="logDataList"];
0.2 -> 0.3 [style = bold, label=""];
0.3 -> 0.4 [style = solid, label="logData"];
0.3 -> 0.4 [style = bold, label=""];
0.3 -> 0.5 [style = solid, label="logData"];
0.3 -> 0.6 [style = solid, label="logData"];
0.3 -> 0.7 [style = solid, label="logData"];
0.3 -> 0.8 [style = solid, label="logData"];
0.3 -> 0.9 [style = solid, label="logData"];
0.3 -> 0.10 [style = solid, label="logData"];
0.3 -> 0.11 [style = solid, label="logData"];
0.3 -> 0.12 [style = solid, label="logData"];
0.3 -> 0.13 [style = solid, label="logData"];
0.4 -> 0.5 [style = bold, label=""];
0.5 -> 0.6 [style = bold, label=""];
0.6 -> 0.7 [style = bold, label=""];
0.7 -> 0.8 [style = bold, label=""];
0.8 -> 0.9 [style = bold, label=""];
0.9 -> 0.10 [style = bold, label=""];
0.10 -> 0.11 [style = bold, label=""];
0.11 -> 0.12 [style = bold, label=""];
0.12 -> 0.13 [style = bold, label=""];
0.14 -> 0.0 [style = dotted, label="true"];
0.14 -> 0.0 [style = bold, label=""];
0.14 -> 0.1 [style = dotted, label="true"];
0.14 -> 0.2 [style = dotted, label="true"];
0.14 -> 0.3 [style = dotted, label="true"];
0.14 -> 0.4 [style = dotted, label="true"];
0.14 -> 0.5 [style = dotted, label="true"];
0.14 -> 0.6 [style = dotted, label="true"];
0.14 -> 0.7 [style = dotted, label="true"];
0.14 -> 0.8 [style = dotted, label="true"];
0.14 -> 0.9 [style = dotted, label="true"];
0.14 -> 0.10 [style = dotted, label="true"];
0.14 -> 0.11 [style = dotted, label="true"];
0.14 -> 0.12 [style = dotted, label="true"];
0.14 -> 0.13 [style = dotted, label="true"];
}
