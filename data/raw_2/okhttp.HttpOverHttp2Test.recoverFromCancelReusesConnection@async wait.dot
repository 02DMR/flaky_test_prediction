digraph PDG {
label = "recoverFromCancelReusesConnection <3...24>";
0.0 [style = filled, label = "CountDownLatch responseDequeuedLatch = new CountDownLatch(1); <4>", fillcolor = white, shape = ellipse];
0.11 [style = filled, label = "assertThat(server.takeRequest().getSequenceNumber()).isEqualTo(1); <23>", fillcolor = deeppink, shape = ellipse];
0.7 [style = filled, label = "callAndCancel(0,responseDequeuedLatch,requestCanceledLatch); <19>", fillcolor = white, shape = ellipse];
0.8 [style = filled, label = "Call call = client.newCall(new Request.Builder().url(server.url(\"/\")).build()); <20>", fillcolor = white, shape = ellipse];
0.6 [style = filled, label = "client = client.newBuilder().dns(new DoubleInetAddressDns()).build(); <18>", fillcolor = white, shape = ellipse];
0.10 [style = filled, label = "assertThat(response.body().string()).isEqualTo(\"def\"); <22>", fillcolor = white, shape = ellipse];
0.12 [style = filled, label = "Enter <3...24>", fillcolor = aquamarine, shape = diamond];
0.5 [style = filled, label = "dispatcher.enqueueResponse(new MockResponse().setBody(\"def\")); <17>", fillcolor = white, shape = ellipse];
0.9 [style = filled, label = "Response response = call.execute(); <21>", fillcolor = white, shape = ellipse];
0.4 [style = filled, label = "dispatcher.enqueueResponse(new MockResponse().setBodyDelay(10,TimeUnit.SECONDS).setBody(\"abc\")); <16>", fillcolor = white, shape = ellipse];
0.3 [style = filled, label = "server.setDispatcher(dispatcher); <15>", fillcolor = white, shape = ellipse];
0.2 [style = filled, label = "QueueDispatcher dispatcher = new QueueDispatcher(){
@Override public MockResponse dispatch (RecordedRequest request  ) {
MockResponse response = super.com.propertygraph.pe.ExpressionInfo@1a701request;
responseDequeuedLatch.countDown();
requestCanceledLatch.await();
return response;
}}; <6...14>", fillcolor = white, shape = ellipse];
0.1 [style = filled, label = "CountDownLatch requestCanceledLatch = new CountDownLatch(1); <5>", fillcolor = white, shape = ellipse];
0.0 -> 0.1 [style = bold, label=""];
0.0 -> 0.2 [style = solid, label="responseDequeuedLatch"];
0.0 -> 0.7 [style = solid, label="responseDequeuedLatch"];
0.1 -> 0.2 [style = solid, label="requestCanceledLatch"];
0.1 -> 0.2 [style = bold, label=""];
0.1 -> 0.7 [style = solid, label="requestCanceledLatch"];
0.2 -> 0.3 [style = solid, label="dispatcher"];
0.2 -> 0.3 [style = bold, label=""];
0.2 -> 0.4 [style = solid, label="dispatcher"];
0.2 -> 0.5 [style = solid, label="dispatcher"];
0.3 -> 0.4 [style = bold, label=""];
0.3 -> 0.8 [style = solid, label="server"];
0.3 -> 0.11 [style = solid, label="server"];
0.4 -> 0.5 [style = solid, label="dispatcher"];
0.4 -> 0.5 [style = bold, label=""];
0.5 -> 0.6 [style = bold, label=""];
0.6 -> 0.7 [style = bold, label=""];
0.6 -> 0.8 [style = solid, label="client"];
0.7 -> 0.8 [style = bold, label=""];
0.8 -> 0.9 [style = solid, label="call"];
0.8 -> 0.9 [style = bold, label=""];
0.9 -> 0.10 [style = solid, label="response"];
0.9 -> 0.10 [style = bold, label=""];
0.10 -> 0.11 [style = bold, label=""];
0.12 -> 0.0 [style = dotted, label="true"];
0.12 -> 0.0 [style = bold, label=""];
0.12 -> 0.1 [style = dotted, label="true"];
0.12 -> 0.2 [style = dotted, label="true"];
0.12 -> 0.3 [style = dotted, label="true"];
0.12 -> 0.4 [style = dotted, label="true"];
0.12 -> 0.5 [style = dotted, label="true"];
0.12 -> 0.6 [style = dotted, label="true"];
0.12 -> 0.7 [style = dotted, label="true"];
0.12 -> 0.8 [style = dotted, label="true"];
0.12 -> 0.9 [style = dotted, label="true"];
0.12 -> 0.10 [style = dotted, label="true"];
0.12 -> 0.11 [style = dotted, label="true"];
}
