digraph PDG {
label = "testGracefulClose <3...20>";
0.3 [style = filled, label = "i++ <5>", fillcolor = white, shape = ellipse];
0.16 [style = filled, label = "Enter <3...20>", fillcolor = aquamarine, shape = diamond];
0.5 [style = filled, label = "KafkaChannel channel = createConnectionWithPendingReceives(i); <7>", fillcolor = white, shape = ellipse];
0.2 [style = filled, label = " (  ( i <= 100 ) &&  ( maxReceiveCountAfterClose < 5 ) ) <5>", fillcolor = white, shape = diamond];
0.8 [style = filled, label = "server.closeConnections(); <10>", fillcolor = white, shape = ellipse];
0.9 [style = filled, label = "while selector.disconnected().isEmpty() <11>", fillcolor = white, shape = diamond];
0.1 [style = filled, label = "int i = 6 <5>", fillcolor = white, shape = ellipse];
0.11 [style = filled, label = "receiveCount += selector.completedReceives().size(); <13>", fillcolor = white, shape = ellipse];
0.13 [style = filled, label = "assertEquals(channel.id(),selector.disconnected().keySet().iterator().next()); <16>", fillcolor = white, shape = ellipse];
0.15 [style = filled, label = "assertTrue( ( \"Too few receives after close: \" + maxReceiveCountAfterClose ), ( maxReceiveCountAfterClose >= 5 )); <19>", fillcolor = deeppink, shape = ellipse];
0.10 [style = filled, label = "selector.poll(1); <12>", fillcolor = white, shape = ellipse];
0.0 [style = filled, label = "int maxReceiveCountAfterClose = 0; <4>", fillcolor = white, shape = ellipse];
0.6 [style = filled, label = "selector.poll(1000); <8>", fillcolor = white, shape = ellipse];
0.7 [style = filled, label = "assertEquals(1,selector.completedReceives().size()); <9>", fillcolor = white, shape = ellipse];
0.14 [style = filled, label = "maxReceiveCountAfterClose = Math.max(maxReceiveCountAfterClose,receiveCount); <17>", fillcolor = white, shape = ellipse];
0.4 [style = filled, label = "int receiveCount = 0; <6>", fillcolor = white, shape = ellipse];
0.12 [style = filled, label = "assertTrue(\"Too many completed receives in one poll\", ( selector.completedReceives().size() <= 1 )); <14>", fillcolor = white, shape = ellipse];
0.0 -> 0.1 [style = bold, label=""];
0.0 -> 0.2 [style = solid, label="maxReceiveCountAfterClose"];
0.0 -> 0.14 [style = solid, label="maxReceiveCountAfterClose"];
0.0 -> 0.15 [style = solid, label="maxReceiveCountAfterClose"];
0.1 -> 0.2 [style = solid, label="i"];
0.1 -> 0.2 [style = bold, label=""];
0.1 -> 0.3 [style = solid, label="i"];
0.1 -> 0.5 [style = solid, label="i"];
0.2 -> 0.3 [style = dotted, label="true"];
0.2 -> 0.4 [style = dotted, label="true"];
0.2 -> 0.4 [style = bold, label=""];
0.2 -> 0.5 [style = dotted, label="true"];
0.2 -> 0.6 [style = dotted, label="true"];
0.2 -> 0.7 [style = dotted, label="true"];
0.2 -> 0.8 [style = dotted, label="true"];
0.2 -> 0.9 [style = dotted, label="true"];
0.2 -> 0.13 [style = dotted, label="true"];
0.2 -> 0.14 [style = dotted, label="true"];
0.2 -> 0.15 [style = bold, label=""];
0.3 -> 0.2 [style = solid, label="i"];
0.3 -> 0.2 [style = bold, label=""];
0.3 -> 0.3 [style = solid, label="i"];
0.3 -> 0.5 [style = solid, label="i"];
0.4 -> 0.5 [style = bold, label=""];
0.4 -> 0.14 [style = solid, label="receiveCount"];
0.5 -> 0.6 [style = bold, label=""];
0.5 -> 0.13 [style = solid, label="channel"];
0.6 -> 0.6 [style = solid, label="selector"];
0.6 -> 0.7 [style = solid, label="selector"];
0.6 -> 0.7 [style = bold, label=""];
0.6 -> 0.9 [style = solid, label="selector"];
0.6 -> 0.10 [style = solid, label="selector"];
0.6 -> 0.11 [style = solid, label="selector"];
0.6 -> 0.12 [style = solid, label="selector"];
0.6 -> 0.13 [style = solid, label="selector"];
0.7 -> 0.8 [style = bold, label=""];
0.8 -> 0.8 [style = solid, label="server"];
0.8 -> 0.9 [style = bold, label=""];
0.9 -> 0.10 [style = dotted, label="true"];
0.9 -> 0.10 [style = bold, label=""];
0.9 -> 0.11 [style = dotted, label="true"];
0.9 -> 0.12 [style = dotted, label="true"];
0.9 -> 0.13 [style = bold, label=""];
0.10 -> 0.6 [style = solid, label="selector"];
0.10 -> 0.7 [style = solid, label="selector"];
0.10 -> 0.9 [style = solid, label="selector"];
0.10 -> 0.10 [style = solid, label="selector"];
0.10 -> 0.11 [style = solid, label="selector"];
0.10 -> 0.11 [style = bold, label=""];
0.10 -> 0.12 [style = solid, label="selector"];
0.10 -> 0.13 [style = solid, label="selector"];
0.11 -> 0.12 [style = bold, label=""];
0.11 -> 0.14 [style = solid, label="receiveCount"];
0.12 -> 0.9 [style = bold, label=""];
0.13 -> 0.14 [style = bold, label=""];
0.14 -> 0.2 [style = solid, label="maxReceiveCountAfterClose"];
0.14 -> 0.3 [style = bold, label=""];
0.14 -> 0.14 [style = solid, label="maxReceiveCountAfterClose"];
0.14 -> 0.15 [style = solid, label="maxReceiveCountAfterClose"];
0.16 -> 0.0 [style = dotted, label="true"];
0.16 -> 0.0 [style = bold, label=""];
0.16 -> 0.1 [style = dotted, label="true"];
0.16 -> 0.2 [style = dotted, label="true"];
0.16 -> 0.15 [style = dotted, label="true"];
}
