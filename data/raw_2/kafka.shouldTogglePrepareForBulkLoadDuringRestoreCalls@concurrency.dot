digraph PDG {
label = "shouldTogglePrepareForBulkLoadDuringRestoreCalls <3...31>";
0.12 [style = filled, label = "assertTrue( ( conditionCheckCount.get() == 2 )); <29>", fillcolor = deeppink, shape = ellipse];
0.6 [style = filled, label = "Thread conditionCheckThread = new Thread(new Runnable(){
@Override public void run ( ) {
assertRocksDBTurnsOnBulkLoading(conditionCheckCount,conditionNotMet);
assertRockDBTurnsOffBulkLoad(conditionCheckCount,conditionNotMet);
}}); <12...19>", fillcolor = white, shape = ellipse];
0.0 [style = filled, label = "final List<KeyValue<byte[],byte[]>> entries = new ArrayList<>(); <4>", fillcolor = white, shape = ellipse];
0.8 [style = filled, label = "conditionCheckThread.start(); <23>", fillcolor = white, shape = ellipse];
0.11 [style = filled, label = "assertTrue( ( conditionNotMet.get() == null )); <28>", fillcolor = white, shape = ellipse];
0.3 [style = filled, label = "entries.add(new KeyValue<>(\"3\".getBytes(\"UTF-8\"),\"c\".getBytes(\"UTF-8\"))); <7>", fillcolor = white, shape = ellipse];
0.9 [style = filled, label = "context.restore(subject.name(),entries); <24>", fillcolor = white, shape = ellipse];
0.5 [style = filled, label = "final AtomicInteger conditionCheckCount = new AtomicInteger(); <10>", fillcolor = white, shape = ellipse];
0.13 [style = filled, label = "Enter <3...31>", fillcolor = aquamarine, shape = diamond];
0.1 [style = filled, label = "entries.add(new KeyValue<>(\"1\".getBytes(\"UTF-8\"),\"a\".getBytes(\"UTF-8\"))); <5>", fillcolor = white, shape = ellipse];
0.7 [style = filled, label = "subject.init(context,subject); <21>", fillcolor = white, shape = ellipse];
0.2 [style = filled, label = "entries.add(new KeyValue<>(\"2\".getBytes(\"UTF-8\"),\"b\".getBytes(\"UTF-8\"))); <6>", fillcolor = white, shape = ellipse];
0.4 [style = filled, label = "final AtomicReference<Exception> conditionNotMet = new AtomicReference<>(); <9>", fillcolor = white, shape = ellipse];
0.10 [style = filled, label = "conditionCheckThread.join(2000); <26>", fillcolor = white, shape = ellipse];
0.0 -> 0.1 [style = solid, label="entries"];
0.0 -> 0.1 [style = bold, label=""];
0.0 -> 0.2 [style = solid, label="entries"];
0.0 -> 0.3 [style = solid, label="entries"];
0.0 -> 0.9 [style = solid, label="entries"];
0.1 -> 0.2 [style = solid, label="entries"];
0.1 -> 0.2 [style = bold, label=""];
0.1 -> 0.3 [style = solid, label="entries"];
0.1 -> 0.9 [style = solid, label="entries"];
0.2 -> 0.3 [style = solid, label="entries"];
0.2 -> 0.3 [style = bold, label=""];
0.2 -> 0.9 [style = solid, label="entries"];
0.3 -> 0.4 [style = bold, label=""];
0.3 -> 0.9 [style = solid, label="entries"];
0.4 -> 0.5 [style = bold, label=""];
0.4 -> 0.6 [style = solid, label="conditionNotMet"];
0.4 -> 0.11 [style = solid, label="conditionNotMet"];
0.5 -> 0.6 [style = solid, label="conditionCheckCount"];
0.5 -> 0.6 [style = bold, label=""];
0.5 -> 0.12 [style = solid, label="conditionCheckCount"];
0.6 -> 0.7 [style = bold, label=""];
0.6 -> 0.8 [style = solid, label="conditionCheckThread"];
0.6 -> 0.10 [style = solid, label="conditionCheckThread"];
0.7 -> 0.8 [style = bold, label=""];
0.7 -> 0.9 [style = solid, label="subject"];
0.8 -> 0.9 [style = bold, label=""];
0.8 -> 0.10 [style = solid, label="conditionCheckThread"];
0.9 -> 0.10 [style = bold, label=""];
0.10 -> 0.11 [style = bold, label=""];
0.11 -> 0.12 [style = bold, label=""];
0.13 -> 0.0 [style = dotted, label="true"];
0.13 -> 0.0 [style = bold, label=""];
0.13 -> 0.1 [style = dotted, label="true"];
0.13 -> 0.2 [style = dotted, label="true"];
0.13 -> 0.3 [style = dotted, label="true"];
0.13 -> 0.4 [style = dotted, label="true"];
0.13 -> 0.5 [style = dotted, label="true"];
0.13 -> 0.6 [style = dotted, label="true"];
0.13 -> 0.7 [style = dotted, label="true"];
0.13 -> 0.8 [style = dotted, label="true"];
0.13 -> 0.9 [style = dotted, label="true"];
0.13 -> 0.10 [style = dotted, label="true"];
0.13 -> 0.11 [style = dotted, label="true"];
0.13 -> 0.12 [style = dotted, label="true"];
}
