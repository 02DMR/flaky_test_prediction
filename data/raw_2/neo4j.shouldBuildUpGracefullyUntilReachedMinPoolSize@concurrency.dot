digraph PDG {
label = "shouldBuildUpGracefullyUntilReachedMinPoolSize <3...21>";
0.1 [style = filled, label = "FakeClock clock = new FakeClock(); <6>", fillcolor = white, shape = ellipse];
0.0 [style = filled, label = "StatefulMonitor stateMonitor = new StatefulMonitor(); <5>", fillcolor = white, shape = ellipse];
0.8 [style = filled, label = "flyweightHolder.release(); <15>", fillcolor = white, shape = ellipse];
0.3 [style = filled, label = "ExecutorService executor = Executors.newCachedThreadPool(); <8>", fillcolor = white, shape = ellipse];
0.12 [style = filled, label = "assertEquals(0,stateMonitor.disposed.get()); <20>", fillcolor = deeppink, shape = ellipse];
0.7 [style = filled, label = "flyweightHolders <13>", fillcolor = white, shape = ellipse];
0.9 [style = filled, label = "executor.awaitTermination(10,TimeUnit.SECONDS); <17>", fillcolor = white, shape = ellipse];
0.5 [style = filled, label = "executor.shutdown(); <11>", fillcolor = white, shape = ellipse];
0.13 [style = filled, label = "Enter <3...21>", fillcolor = aquamarine, shape = diamond];
0.4 [style = filled, label = "List<FlyweightHolder<Object>> flyweightHolders = acquireFromPool(pool,5,executor); <9>", fillcolor = white, shape = ellipse];
0.10 [style = filled, label = "assertEquals(-1,stateMonitor.currentPeakSize.get()); <18>", fillcolor = white, shape = ellipse];
0.2 [style = filled, label = "final LinkedQueuePool<Object> pool = getLinkedQueuePool(stateMonitor,clock,5); <7>", fillcolor = white, shape = ellipse];
0.6 [style = filled, label = "FlyweightHolder<Object> flyweightHolder <13>", fillcolor = tomato, shape = box];
0.11 [style = filled, label = "assertEquals(-1,stateMonitor.targetSize.get()); <19>", fillcolor = white, shape = ellipse];
0.0 -> 0.1 [style = bold, label=""];
0.0 -> 0.2 [style = solid, label="stateMonitor"];
0.1 -> 0.2 [style = solid, label="clock"];
0.1 -> 0.2 [style = bold, label=""];
0.2 -> 0.3 [style = bold, label=""];
0.2 -> 0.4 [style = solid, label="pool"];
0.3 -> 0.4 [style = solid, label="executor"];
0.3 -> 0.4 [style = bold, label=""];
0.3 -> 0.5 [style = solid, label="executor"];
0.3 -> 0.9 [style = solid, label="executor"];
0.4 -> 0.5 [style = bold, label=""];
0.5 -> 0.8 [style = bold, label=""];
0.5 -> 0.9 [style = solid, label="executor"];
0.8 -> 0.8 [style = solid, label="flyweightHolder"];
0.8 -> 0.8 [style = bold, label=""];
0.8 -> 0.9 [style = bold, label=""];
0.9 -> 0.10 [style = bold, label=""];
0.10 -> 0.11 [style = bold, label=""];
0.11 -> 0.12 [style = bold, label=""];
0.13 -> 0.0 [style = dotted, label="true"];
0.13 -> 0.0 [style = bold, label=""];
0.13 -> 0.1 [style = dotted, label="true"];
0.13 -> 0.2 [style = dotted, label="true"];
0.13 -> 0.3 [style = dotted, label="true"];
0.13 -> 0.4 [style = dotted, label="true"];
0.13 -> 0.5 [style = dotted, label="true"];
0.13 -> 0.6 [style = dotted, label="true"];
0.13 -> 0.7 [style = dotted, label="true"];
0.13 -> 0.8 [style = dotted, label="true"];
0.13 -> 0.9 [style = dotted, label="true"];
0.13 -> 0.10 [style = dotted, label="true"];
0.13 -> 0.11 [style = dotted, label="true"];
0.13 -> 0.12 [style = dotted, label="true"];
}
