digraph PDG {
label = "testLeaseRelease <3...32>";
0.12 [style = filled, label = "Future<LocalPoolEntry> future3 = pool.lease(\"otherhost\",null); <16>", fillcolor = white, shape = ellipse];
0.9 [style = filled, label = "Future<LocalPoolEntry> future2 = pool.lease(\"somehost\",null); <13>", fillcolor = white, shape = ellipse];
0.21 [style = filled, label = "pool.release(entry2,true); <25>", fillcolor = white, shape = ellipse];
0.0 [style = filled, label = "HttpConnection conn1 = Mockito.mock(); <4>", fillcolor = white, shape = ellipse];
0.6 [style = filled, label = "Future<LocalPoolEntry> future1 = pool.lease(\"somehost\",null); <10>", fillcolor = white, shape = ellipse];
0.19 [style = filled, label = "Assert.assertSame(entry1,entry); <23>", fillcolor = white, shape = ellipse];
0.27 [style = filled, label = "Assert.assertEquals(0,totals.getLeased()); <31>", fillcolor = deeppink, shape = ellipse];
0.23 [style = filled, label = "Mockito.verify(conn1,Mockito.never()).close(); <27>", fillcolor = white, shape = ellipse];
0.7 [style = filled, label = "LocalPoolEntry entry1 = future1.get(1,TimeUnit.SECONDS); <11>", fillcolor = white, shape = ellipse];
0.20 [style = filled, label = "pool.release(entry1,true); <24>", fillcolor = white, shape = ellipse];
0.5 [style = filled, label = "LocalConnPool pool = new LocalConnPool(connFactory,2,10); <9>", fillcolor = white, shape = ellipse];
0.10 [style = filled, label = "LocalPoolEntry entry2 = future2.get(1,TimeUnit.SECONDS); <14>", fillcolor = white, shape = ellipse];
0.14 [style = filled, label = "Assert.assertNotNull(entry3); <18>", fillcolor = white, shape = ellipse];
0.11 [style = filled, label = "Assert.assertNotNull(entry2); <15>", fillcolor = white, shape = ellipse];
0.26 [style = filled, label = "Assert.assertEquals(2,totals.getAvailable()); <30>", fillcolor = white, shape = ellipse];
0.24 [style = filled, label = "Mockito.verify(conn2,Mockito.times(1)).close(); <28>", fillcolor = white, shape = ellipse];
0.2 [style = filled, label = "LocalConnFactory connFactory = Mockito.mock(); <6>", fillcolor = white, shape = ellipse];
0.25 [style = filled, label = "totals = pool.getTotalStats(); <29>", fillcolor = white, shape = ellipse];
0.15 [style = filled, label = "PoolStats totals = pool.getTotalStats(); <19>", fillcolor = white, shape = ellipse];
0.1 [style = filled, label = "HttpConnection conn2 = Mockito.mock(); <5>", fillcolor = white, shape = ellipse];
0.3 [style = filled, label = "Mockito.when(connFactory.create(Mockito.eq(\"somehost\"))).thenReturn(conn1); <7>", fillcolor = white, shape = ellipse];
0.13 [style = filled, label = "LocalPoolEntry entry3 = future3.get(1,TimeUnit.SECONDS); <17>", fillcolor = white, shape = ellipse];
0.8 [style = filled, label = "Assert.assertNotNull(entry1); <12>", fillcolor = white, shape = ellipse];
0.16 [style = filled, label = "Assert.assertEquals(0,totals.getAvailable()); <20>", fillcolor = white, shape = ellipse];
0.4 [style = filled, label = "Mockito.when(connFactory.create(Mockito.eq(\"otherhost\"))).thenReturn(conn2); <8>", fillcolor = white, shape = ellipse];
0.17 [style = filled, label = "Assert.assertEquals(3,totals.getLeased()); <21>", fillcolor = white, shape = ellipse];
0.18 [style = filled, label = "LocalPoolEntry entry = future1.get(); <22>", fillcolor = white, shape = ellipse];
0.22 [style = filled, label = "pool.release(entry3,false); <26>", fillcolor = white, shape = ellipse];
0.28 [style = filled, label = "Enter <3...32>", fillcolor = aquamarine, shape = diamond];
0.0 -> 0.1 [style = bold, label=""];
0.0 -> 0.3 [style = solid, label="conn1"];
0.0 -> 0.23 [style = solid, label="conn1"];
0.1 -> 0.2 [style = bold, label=""];
0.1 -> 0.4 [style = solid, label="conn2"];
0.1 -> 0.24 [style = solid, label="conn2"];
0.2 -> 0.3 [style = solid, label="connFactory"];
0.2 -> 0.3 [style = bold, label=""];
0.2 -> 0.4 [style = solid, label="connFactory"];
0.2 -> 0.5 [style = solid, label="connFactory"];
0.3 -> 0.4 [style = bold, label=""];
0.4 -> 0.5 [style = bold, label=""];
0.5 -> 0.6 [style = solid, label="pool"];
0.5 -> 0.6 [style = bold, label=""];
0.5 -> 0.9 [style = solid, label="pool"];
0.5 -> 0.12 [style = solid, label="pool"];
0.5 -> 0.15 [style = solid, label="pool"];
0.5 -> 0.20 [style = solid, label="pool"];
0.5 -> 0.21 [style = solid, label="pool"];
0.5 -> 0.22 [style = solid, label="pool"];
0.5 -> 0.25 [style = solid, label="pool"];
0.6 -> 0.7 [style = solid, label="future1"];
0.6 -> 0.7 [style = bold, label=""];
0.6 -> 0.18 [style = solid, label="future1"];
0.7 -> 0.8 [style = solid, label="entry1"];
0.7 -> 0.8 [style = bold, label=""];
0.7 -> 0.19 [style = solid, label="entry1"];
0.7 -> 0.20 [style = solid, label="entry1"];
0.8 -> 0.9 [style = bold, label=""];
0.9 -> 0.10 [style = solid, label="future2"];
0.9 -> 0.10 [style = bold, label=""];
0.10 -> 0.11 [style = solid, label="entry2"];
0.10 -> 0.11 [style = bold, label=""];
0.10 -> 0.21 [style = solid, label="entry2"];
0.11 -> 0.12 [style = bold, label=""];
0.12 -> 0.13 [style = solid, label="future3"];
0.12 -> 0.13 [style = bold, label=""];
0.13 -> 0.14 [style = solid, label="entry3"];
0.13 -> 0.14 [style = bold, label=""];
0.13 -> 0.22 [style = solid, label="entry3"];
0.14 -> 0.15 [style = bold, label=""];
0.15 -> 0.16 [style = solid, label="totals"];
0.15 -> 0.16 [style = bold, label=""];
0.15 -> 0.17 [style = solid, label="totals"];
0.15 -> 0.26 [style = solid, label="totals"];
0.15 -> 0.27 [style = solid, label="totals"];
0.16 -> 0.17 [style = bold, label=""];
0.17 -> 0.18 [style = bold, label=""];
0.18 -> 0.19 [style = solid, label="entry"];
0.18 -> 0.19 [style = bold, label=""];
0.19 -> 0.20 [style = bold, label=""];
0.20 -> 0.21 [style = solid, label="pool"];
0.20 -> 0.21 [style = bold, label=""];
0.20 -> 0.22 [style = solid, label="pool"];
0.20 -> 0.25 [style = solid, label="pool"];
0.21 -> 0.22 [style = solid, label="pool"];
0.21 -> 0.22 [style = bold, label=""];
0.21 -> 0.25 [style = solid, label="pool"];
0.22 -> 0.23 [style = bold, label=""];
0.22 -> 0.25 [style = solid, label="pool"];
0.23 -> 0.24 [style = bold, label=""];
0.24 -> 0.25 [style = bold, label=""];
0.25 -> 0.26 [style = solid, label="totals"];
0.25 -> 0.26 [style = bold, label=""];
0.25 -> 0.27 [style = solid, label="totals"];
0.26 -> 0.27 [style = bold, label=""];
0.28 -> 0.0 [style = dotted, label="true"];
0.28 -> 0.0 [style = bold, label=""];
0.28 -> 0.1 [style = dotted, label="true"];
0.28 -> 0.2 [style = dotted, label="true"];
0.28 -> 0.3 [style = dotted, label="true"];
0.28 -> 0.4 [style = dotted, label="true"];
0.28 -> 0.5 [style = dotted, label="true"];
0.28 -> 0.6 [style = dotted, label="true"];
0.28 -> 0.7 [style = dotted, label="true"];
0.28 -> 0.8 [style = dotted, label="true"];
0.28 -> 0.9 [style = dotted, label="true"];
0.28 -> 0.10 [style = dotted, label="true"];
0.28 -> 0.11 [style = dotted, label="true"];
0.28 -> 0.12 [style = dotted, label="true"];
0.28 -> 0.13 [style = dotted, label="true"];
0.28 -> 0.14 [style = dotted, label="true"];
0.28 -> 0.15 [style = dotted, label="true"];
0.28 -> 0.16 [style = dotted, label="true"];
0.28 -> 0.17 [style = dotted, label="true"];
0.28 -> 0.18 [style = dotted, label="true"];
0.28 -> 0.19 [style = dotted, label="true"];
0.28 -> 0.20 [style = dotted, label="true"];
0.28 -> 0.21 [style = dotted, label="true"];
0.28 -> 0.22 [style = dotted, label="true"];
0.28 -> 0.23 [style = dotted, label="true"];
0.28 -> 0.24 [style = dotted, label="true"];
0.28 -> 0.25 [style = dotted, label="true"];
0.28 -> 0.26 [style = dotted, label="true"];
0.28 -> 0.27 [style = dotted, label="true"];
}
