digraph PDG {
label = "testMultiQueryWithTwoLoads <3...24>";
0.0 [style = filled, label = "System.out.println(\"===== test multi-query with two loads =====\"); <4>", fillcolor = white, shape = ellipse];
0.3 [style = filled, label = "myPig.registerQuery( ( \"b = load 'test/org/apache/pig/test/data/passwd2' \" + \"using PigStorage(':') as (uname:chararray, passwd:chararray, uid:int,gid:int);\" )); <8>", fillcolor = white, shape = ellipse];
0.11 [style = filled, label = "PhysicalPlan pp = checkPhysicalPlan(lp,2,3,19); <16>", fillcolor = white, shape = ellipse];
0.14 [style = filled, label = "e.printStackTrace(); <19>", fillcolor = white, shape = ellipse];
0.5 [style = filled, label = "myPig.registerQuery(\"d = filter b by uid > 10;\"); <10>", fillcolor = white, shape = ellipse];
0.10 [style = filled, label = "LogicalPlan lp = checkLogicalPlan(2,3,16); <15>", fillcolor = white, shape = ellipse];
0.17 [style = filled, label = "Enter <3...24>", fillcolor = aquamarine, shape = diamond];
0.6 [style = filled, label = "myPig.registerQuery(\"store c into '/tmp/output1';\"); <11>", fillcolor = white, shape = ellipse];
0.1 [style = filled, label = "myPig.setBatchOn(); <6>", fillcolor = white, shape = ellipse];
0.12 [style = filled, label = "Assert.assertTrue(executePlan(pp)); <17>", fillcolor = white, shape = ellipse];
0.4 [style = filled, label = "myPig.registerQuery(\"c = filter a by uid > 5;\"); <9>", fillcolor = white, shape = ellipse];
0.8 [style = filled, label = "myPig.registerQuery(\"e = cogroup c by uid, d by uid;\"); <13>", fillcolor = white, shape = ellipse];
0.16 [style = filled, label = "{
deleteOutputFiles();
} <21...23>", fillcolor = deeppink, shape = ellipse];
0.2 [style = filled, label = "myPig.registerQuery( ( \"a = load 'test/org/apache/pig/test/data/passwd' \" + \"using PigStorage(':') as (uname:chararray, passwd:chararray, uid:int,gid:int);\" )); <7>", fillcolor = white, shape = ellipse];
0.13 [style = filled, label = "catch ( Exception e ) <18>", fillcolor = white, shape = diamond];
0.9 [style = filled, label = "myPig.registerQuery(\"store e into '/tmp/output3';\"); <14>", fillcolor = white, shape = ellipse];
0.7 [style = filled, label = "myPig.registerQuery(\"store d into '/tmp/output2';\"); <12>", fillcolor = white, shape = ellipse];
0.15 [style = filled, label = "Assert.fail(); <20>", fillcolor = white, shape = ellipse];
0.0 -> 0.1 [style = bold, label=""];
0.1 -> 0.2 [style = solid, label="myPig"];
0.1 -> 0.2 [style = bold, label=""];
0.1 -> 0.3 [style = solid, label="myPig"];
0.1 -> 0.4 [style = solid, label="myPig"];
0.1 -> 0.5 [style = solid, label="myPig"];
0.1 -> 0.6 [style = solid, label="myPig"];
0.1 -> 0.7 [style = solid, label="myPig"];
0.1 -> 0.8 [style = solid, label="myPig"];
0.1 -> 0.9 [style = solid, label="myPig"];
0.2 -> 0.3 [style = solid, label="myPig"];
0.2 -> 0.3 [style = bold, label=""];
0.2 -> 0.4 [style = solid, label="myPig"];
0.2 -> 0.5 [style = solid, label="myPig"];
0.2 -> 0.6 [style = solid, label="myPig"];
0.2 -> 0.7 [style = solid, label="myPig"];
0.2 -> 0.8 [style = solid, label="myPig"];
0.2 -> 0.9 [style = solid, label="myPig"];
0.3 -> 0.4 [style = solid, label="myPig"];
0.3 -> 0.4 [style = bold, label=""];
0.3 -> 0.5 [style = solid, label="myPig"];
0.3 -> 0.6 [style = solid, label="myPig"];
0.3 -> 0.7 [style = solid, label="myPig"];
0.3 -> 0.8 [style = solid, label="myPig"];
0.3 -> 0.9 [style = solid, label="myPig"];
0.4 -> 0.5 [style = solid, label="myPig"];
0.4 -> 0.5 [style = bold, label=""];
0.4 -> 0.6 [style = solid, label="myPig"];
0.4 -> 0.7 [style = solid, label="myPig"];
0.4 -> 0.8 [style = solid, label="myPig"];
0.4 -> 0.9 [style = solid, label="myPig"];
0.5 -> 0.6 [style = solid, label="myPig"];
0.5 -> 0.6 [style = bold, label=""];
0.5 -> 0.7 [style = solid, label="myPig"];
0.5 -> 0.8 [style = solid, label="myPig"];
0.5 -> 0.9 [style = solid, label="myPig"];
0.6 -> 0.7 [style = solid, label="myPig"];
0.6 -> 0.7 [style = bold, label=""];
0.6 -> 0.8 [style = solid, label="myPig"];
0.6 -> 0.9 [style = solid, label="myPig"];
0.7 -> 0.8 [style = solid, label="myPig"];
0.7 -> 0.8 [style = bold, label=""];
0.7 -> 0.9 [style = solid, label="myPig"];
0.8 -> 0.9 [style = solid, label="myPig"];
0.8 -> 0.9 [style = bold, label=""];
0.9 -> 0.10 [style = bold, label=""];
0.10 -> 0.11 [style = solid, label="lp"];
0.10 -> 0.11 [style = bold, label=""];
0.11 -> 0.12 [style = solid, label="pp"];
0.11 -> 0.12 [style = bold, label=""];
0.12 -> 0.16 [style = bold, label=""];
0.13 -> 0.14 [style = dotted, label="true"];
0.13 -> 0.14 [style = bold, label=""];
0.13 -> 0.15 [style = dotted, label="true"];
0.14 -> 0.15 [style = bold, label=""];
0.15 -> 0.16 [style = bold, label=""];
0.17 -> 0.0 [style = dotted, label="true"];
0.17 -> 0.0 [style = bold, label=""];
0.17 -> 0.1 [style = dotted, label="true"];
0.17 -> 0.2 [style = dotted, label="true"];
0.17 -> 0.3 [style = dotted, label="true"];
0.17 -> 0.4 [style = dotted, label="true"];
0.17 -> 0.5 [style = dotted, label="true"];
0.17 -> 0.6 [style = dotted, label="true"];
0.17 -> 0.7 [style = dotted, label="true"];
0.17 -> 0.8 [style = dotted, label="true"];
0.17 -> 0.9 [style = dotted, label="true"];
0.17 -> 0.10 [style = dotted, label="true"];
0.17 -> 0.11 [style = dotted, label="true"];
0.17 -> 0.12 [style = dotted, label="true"];
}
