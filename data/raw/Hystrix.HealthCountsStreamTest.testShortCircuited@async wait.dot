digraph PDG {
label = "testShortCircuited <3...33>";
0.15 [style = filled, label = "shortCircuit1.observe(); <21>", fillcolor = white, shape = ellipse];
0.0 [style = filled, label = "HystrixCommandKey key = Factory.asKey(\"CMD-Health-G\"); <4>", fillcolor = white, shape = ellipse];
0.4 [style = filled, label = "CommandStreamTest.Command failure1 = Command.from(groupKey,key,FAILURE,20); <8>", fillcolor = white, shape = ellipse];
0.23 [style = filled, label = "assertEquals(3L,stream.getLatest().getErrorCount()); <31>", fillcolor = white, shape = ellipse];
0.11 [style = filled, label = "failure3.observe(); <15>", fillcolor = white, shape = ellipse];
0.12 [style = filled, label = "Thread.sleep(100); <17>", fillcolor = white, shape = ellipse];
0.22 [style = filled, label = "System.out.println( ( \"ReqLog : \" + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString() )); <30>", fillcolor = white, shape = ellipse];
0.2 [style = filled, label = "final CountDownLatch latch = new CountDownLatch(1); <6>", fillcolor = white, shape = ellipse];
0.3 [style = filled, label = "stream.observe().take(10).subscribe(getSubscriber(latch)); <7>", fillcolor = white, shape = ellipse];
0.10 [style = filled, label = "failure2.observe(); <14>", fillcolor = white, shape = ellipse];
0.25 [style = filled, label = "Enter <3...33>", fillcolor = aquamarine, shape = diamond];
0.21 [style = filled, label = "assertTrue(shortCircuit2.isResponseShortCircuited()); <29>", fillcolor = white, shape = ellipse];
0.13 [style = filled, label = "catch ( InterruptedException ie ) <18>", fillcolor = white, shape = diamond];
0.14 [style = filled, label = "fail(ie.getMessage()); <19>", fillcolor = white, shape = ellipse];
0.1 [style = filled, label = "stream = HealthCountsStream.getInstance(key,10,100); <5>", fillcolor = white, shape = ellipse];
0.17 [style = filled, label = "assertTrue(latch.await(10000,TimeUnit.MILLISECONDS)); <24>", fillcolor = white, shape = ellipse];
0.24 [style = filled, label = "assertEquals(3L,stream.getLatest().getTotalRequests()); <32>", fillcolor = deeppink, shape = ellipse];
0.5 [style = filled, label = "CommandStreamTest.Command failure2 = Command.from(groupKey,key,FAILURE,20); <9>", fillcolor = white, shape = ellipse];
0.18 [style = filled, label = "catch ( InterruptedException ex ) <25>", fillcolor = white, shape = diamond];
0.8 [style = filled, label = "CommandStreamTest.Command shortCircuit2 = Command.from(groupKey,key,SUCCESS); <12>", fillcolor = white, shape = ellipse];
0.7 [style = filled, label = "CommandStreamTest.Command shortCircuit1 = Command.from(groupKey,key,SUCCESS); <11>", fillcolor = white, shape = ellipse];
0.16 [style = filled, label = "shortCircuit2.observe(); <22>", fillcolor = white, shape = ellipse];
0.20 [style = filled, label = "assertTrue(shortCircuit1.isResponseShortCircuited()); <28>", fillcolor = white, shape = ellipse];
0.19 [style = filled, label = "fail(\"Interrupted ex\"); <26>", fillcolor = white, shape = ellipse];
0.6 [style = filled, label = "CommandStreamTest.Command failure3 = Command.from(groupKey,key,FAILURE,20); <10>", fillcolor = white, shape = ellipse];
0.9 [style = filled, label = "failure1.observe(); <13>", fillcolor = white, shape = ellipse];
0.0 -> 0.1 [style = solid, label="key"];
0.0 -> 0.1 [style = bold, label=""];
0.0 -> 0.4 [style = solid, label="key"];
0.0 -> 0.5 [style = solid, label="key"];
0.0 -> 0.6 [style = solid, label="key"];
0.0 -> 0.7 [style = solid, label="key"];
0.0 -> 0.8 [style = solid, label="key"];
0.1 -> 0.2 [style = bold, label=""];
0.1 -> 0.3 [style = solid, label="stream"];
0.1 -> 0.23 [style = solid, label="stream"];
0.1 -> 0.24 [style = solid, label="stream"];
0.2 -> 0.3 [style = solid, label="latch"];
0.2 -> 0.3 [style = bold, label=""];
0.2 -> 0.17 [style = solid, label="latch"];
0.3 -> 0.4 [style = bold, label=""];
0.4 -> 0.5 [style = bold, label=""];
0.4 -> 0.9 [style = solid, label="failure1"];
0.5 -> 0.6 [style = bold, label=""];
0.5 -> 0.10 [style = solid, label="failure2"];
0.6 -> 0.7 [style = bold, label=""];
0.6 -> 0.11 [style = solid, label="failure3"];
0.7 -> 0.8 [style = bold, label=""];
0.7 -> 0.15 [style = solid, label="shortCircuit1"];
0.7 -> 0.20 [style = solid, label="shortCircuit1"];
0.8 -> 0.9 [style = bold, label=""];
0.8 -> 0.16 [style = solid, label="shortCircuit2"];
0.8 -> 0.21 [style = solid, label="shortCircuit2"];
0.9 -> 0.10 [style = bold, label=""];
0.10 -> 0.11 [style = bold, label=""];
0.11 -> 0.12 [style = bold, label=""];
0.12 -> 0.15 [style = bold, label=""];
0.13 -> 0.14 [style = dotted, label="true"];
0.13 -> 0.14 [style = bold, label=""];
0.14 -> 0.15 [style = bold, label=""];
0.15 -> 0.16 [style = bold, label=""];
0.15 -> 0.20 [style = solid, label="shortCircuit1"];
0.16 -> 0.17 [style = bold, label=""];
0.16 -> 0.21 [style = solid, label="shortCircuit2"];
0.17 -> 0.20 [style = bold, label=""];
0.18 -> 0.19 [style = dotted, label="true"];
0.18 -> 0.19 [style = bold, label=""];
0.19 -> 0.20 [style = bold, label=""];
0.20 -> 0.21 [style = bold, label=""];
0.21 -> 0.22 [style = bold, label=""];
0.22 -> 0.23 [style = bold, label=""];
0.23 -> 0.24 [style = bold, label=""];
0.25 -> 0.0 [style = dotted, label="true"];
0.25 -> 0.0 [style = bold, label=""];
0.25 -> 0.1 [style = dotted, label="true"];
0.25 -> 0.2 [style = dotted, label="true"];
0.25 -> 0.3 [style = dotted, label="true"];
0.25 -> 0.4 [style = dotted, label="true"];
0.25 -> 0.5 [style = dotted, label="true"];
0.25 -> 0.6 [style = dotted, label="true"];
0.25 -> 0.7 [style = dotted, label="true"];
0.25 -> 0.8 [style = dotted, label="true"];
0.25 -> 0.9 [style = dotted, label="true"];
0.25 -> 0.10 [style = dotted, label="true"];
0.25 -> 0.11 [style = dotted, label="true"];
0.25 -> 0.12 [style = dotted, label="true"];
0.25 -> 0.15 [style = dotted, label="true"];
0.25 -> 0.16 [style = dotted, label="true"];
0.25 -> 0.17 [style = dotted, label="true"];
0.25 -> 0.20 [style = dotted, label="true"];
0.25 -> 0.21 [style = dotted, label="true"];
0.25 -> 0.22 [style = dotted, label="true"];
0.25 -> 0.23 [style = dotted, label="true"];
0.25 -> 0.24 [style = dotted, label="true"];
}
