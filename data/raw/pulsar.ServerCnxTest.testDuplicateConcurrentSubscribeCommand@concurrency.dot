digraph PDG {
label = "testDuplicateConcurrentSubscribeCommand <3...19>";
0.10 [style = filled, label = "CommandError error = ((CommandError)(response)); <16>", fillcolor = white, shape = ellipse];
0.6 [style = filled, label = "clientCommand = Commands.newSubscribe(successTopicName,successSubName,1,1,Exclusive,0,\"test\",0); <11...12>", fillcolor = white, shape = ellipse];
0.3 [style = filled, label = "doReturn(delayFuture).when(brokerService).getOrCreateTopic(any()); <7>", fillcolor = white, shape = ellipse];
0.11 [style = filled, label = "assertEquals(error.getError(),ServiceNotReady); <17>", fillcolor = white, shape = ellipse];
0.5 [style = filled, label = "channel.writeInbound(clientCommand); <10>", fillcolor = white, shape = ellipse];
0.7 [style = filled, label = "channel.writeInbound(clientCommand); <13>", fillcolor = white, shape = ellipse];
0.4 [style = filled, label = "ByteBuf clientCommand = Commands.newSubscribe(successTopicName,successSubName,1,1,Exclusive,0,\"test\",0); <8...9>", fillcolor = white, shape = ellipse];
0.1 [style = filled, label = "setChannelConnected(); <5>", fillcolor = white, shape = ellipse];
0.13 [style = filled, label = "Enter <3...19>", fillcolor = aquamarine, shape = diamond];
0.0 [style = filled, label = "resetChannel(); <4>", fillcolor = white, shape = ellipse];
0.8 [style = filled, label = "Object response = getResponse(); <14>", fillcolor = white, shape = ellipse];
0.9 [style = filled, label = "assertTrue(response instanceof CommandError, ( \"Response is not CommandError but \" + response )); <15>", fillcolor = white, shape = ellipse];
0.2 [style = filled, label = "CompletableFuture<Topic> delayFuture = new CompletableFuture<>(); <6>", fillcolor = white, shape = ellipse];
0.12 [style = filled, label = "channel.finish(); <18>", fillcolor = deeppink, shape = ellipse];
0.0 -> 0.1 [style = bold, label=""];
0.1 -> 0.2 [style = bold, label=""];
0.2 -> 0.3 [style = solid, label="delayFuture"];
0.2 -> 0.3 [style = bold, label=""];
0.3 -> 0.4 [style = bold, label=""];
0.4 -> 0.5 [style = solid, label="clientCommand"];
0.4 -> 0.5 [style = bold, label=""];
0.4 -> 0.7 [style = solid, label="clientCommand"];
0.5 -> 0.6 [style = bold, label=""];
0.5 -> 0.7 [style = solid, label="channel"];
0.5 -> 0.12 [style = solid, label="channel"];
0.6 -> 0.7 [style = solid, label="clientCommand"];
0.6 -> 0.7 [style = bold, label=""];
0.7 -> 0.8 [style = bold, label=""];
0.7 -> 0.12 [style = solid, label="channel"];
0.8 -> 0.9 [style = solid, label="response"];
0.8 -> 0.9 [style = bold, label=""];
0.8 -> 0.10 [style = solid, label="response"];
0.9 -> 0.10 [style = bold, label=""];
0.10 -> 0.11 [style = solid, label="error"];
0.10 -> 0.11 [style = bold, label=""];
0.11 -> 0.12 [style = bold, label=""];
0.13 -> 0.0 [style = dotted, label="true"];
0.13 -> 0.0 [style = bold, label=""];
0.13 -> 0.1 [style = dotted, label="true"];
0.13 -> 0.2 [style = dotted, label="true"];
0.13 -> 0.3 [style = dotted, label="true"];
0.13 -> 0.4 [style = dotted, label="true"];
0.13 -> 0.5 [style = dotted, label="true"];
0.13 -> 0.6 [style = dotted, label="true"];
0.13 -> 0.7 [style = dotted, label="true"];
0.13 -> 0.8 [style = dotted, label="true"];
0.13 -> 0.9 [style = dotted, label="true"];
0.13 -> 0.10 [style = dotted, label="true"];
0.13 -> 0.11 [style = dotted, label="true"];
0.13 -> 0.12 [style = dotted, label="true"];
}
