digraph PDG {
label = "testCheckpointForInactiveTaskGroup <3...48>";
0.6 [style = filled, label = "expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of(id1,id2,id3)).anyTimes(); <11>", fillcolor = white, shape = ellipse];
0.11 [style = filled, label = "expect(taskStorage.getTask(\"id2\")).andReturn(Optional.of(id2)).anyTimes(); <16>", fillcolor = white, shape = ellipse];
0.19 [style = filled, label = "expect(taskClient.getStartTimeAsync(\"id2\")).andReturn(Futures.immediateFuture(startTime)); <24>", fillcolor = white, shape = ellipse];
0.2 [style = filled, label = "final Task id2 = createKafkaIndexTask(\"id2\",DATASOURCE,0,new KafkaPartitions(topic,ImmutableMap.of(0,10L,1,20L,2,30L)),new KafkaPartitions(topic,ImmutableMap.of(0,Long.MAX_VALUE,1,Long.MAX_VALUE,2,Long.MAX_VALUE)),null,null); <7>", fillcolor = white, shape = ellipse];
0.27 [style = filled, label = "replayAll(); <32>", fillcolor = white, shape = ellipse];
0.16 [style = filled, label = "expect(taskClient.getStatusAsync(\"id3\")).andReturn(Futures.immediateFuture(READING)); <21>", fillcolor = white, shape = ellipse];
0.40 [style = filled, label = "Assert.assertNull(serviceEmitter.getExceptionClass()); <47>", fillcolor = deeppink, shape = ellipse];
0.21 [style = filled, label = "final TreeMap<Integer,Map<Integer,Long>> checkpoints = new TreeMap<>(); <26>", fillcolor = white, shape = ellipse];
0.31 [style = filled, label = "supervisor.moveTaskGroupToPendingCompletion(0); <36>", fillcolor = white, shape = ellipse];
0.10 [style = filled, label = "expect(taskStorage.getTask(\"id1\")).andReturn(Optional.of(id1)).anyTimes(); <15>", fillcolor = white, shape = ellipse];
0.18 [style = filled, label = "expect(taskClient.getStartTimeAsync(\"id1\")).andReturn(Futures.immediateFuture(startTime)); <23>", fillcolor = white, shape = ellipse];
0.5 [style = filled, label = "expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes(); <10>", fillcolor = white, shape = ellipse];
0.24 [style = filled, label = "expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"id2\"),anyBoolean())).andReturn(Futures.immediateFuture(checkpoints)).times(1); <29>", fillcolor = white, shape = ellipse];
0.26 [style = filled, label = "taskRunner.registerListener(anyObject(),anyObject()); <31>", fillcolor = white, shape = ellipse];
0.29 [style = filled, label = "supervisor.runInternal(); <34>", fillcolor = white, shape = ellipse];
0.38 [style = filled, label = "Assert.assertNull(serviceEmitter.getStackTrace()); <45>", fillcolor = white, shape = ellipse];
0.9 [style = filled, label = "expect(taskStorage.getStatus(\"id3\")).andReturn(Optional.of(TaskStatus.running(\"id3\"))).anyTimes(); <14>", fillcolor = white, shape = ellipse];
0.32 [style = filled, label = "supervisor.checkpoint(0,((KafkaIndexTask)(id1)).getIOConfig().getBaseSequenceName(),new KafkaDataSourceMetadata(new KafkaPartitions(topic,checkpoints.get(0))),new KafkaDataSourceMetadata(new KafkaPartitions(topic,fakeCheckpoints))); <37>", fillcolor = white, shape = ellipse];
0.0 [style = filled, label = "supervisor = getSupervisor(2,1,true,\"PT1S\",null,null,false); <5>", fillcolor = white, shape = ellipse];
0.36 [style = filled, label = "while  ( serviceEmitter.getStackTrace() != null ) <42>", fillcolor = white, shape = diamond];
0.28 [style = filled, label = "supervisor.start(); <33>", fillcolor = white, shape = ellipse];
0.12 [style = filled, label = "expect(taskStorage.getTask(\"id3\")).andReturn(Optional.of(id3)).anyTimes(); <17>", fillcolor = white, shape = ellipse];
0.20 [style = filled, label = "expect(taskClient.getStartTimeAsync(\"id3\")).andReturn(Futures.immediateFuture(startTime)); <25>", fillcolor = white, shape = ellipse];
0.23 [style = filled, label = "expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"id1\"),anyBoolean())).andReturn(Futures.immediateFuture(checkpoints)).times(1); <28>", fillcolor = white, shape = ellipse];
0.15 [style = filled, label = "expect(taskClient.getStatusAsync(\"id2\")).andReturn(Futures.immediateFuture(READING)); <20>", fillcolor = white, shape = ellipse];
0.4 [style = filled, label = "expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes(); <9>", fillcolor = white, shape = ellipse];
0.7 [style = filled, label = "expect(taskStorage.getStatus(\"id1\")).andReturn(Optional.of(TaskStatus.running(\"id1\"))).anyTimes(); <12>", fillcolor = white, shape = ellipse];
0.17 [style = filled, label = "final DateTime startTime = DateTimes.nowUtc(); <22>", fillcolor = white, shape = ellipse];
0.37 [style = filled, label = "Thread.sleep(100); <43>", fillcolor = white, shape = ellipse];
0.22 [style = filled, label = "checkpoints.put(0,ImmutableMap.of(0,10L,1,20L,2,30L)); <27>", fillcolor = white, shape = ellipse];
0.1 [style = filled, label = "final Task id1 = createKafkaIndexTask(\"id1\",DATASOURCE,0,new KafkaPartitions(topic,ImmutableMap.of(0,0L,1,0L,2,0L)),new KafkaPartitions(topic,ImmutableMap.of(0,Long.MAX_VALUE,1,Long.MAX_VALUE,2,Long.MAX_VALUE)),null,null); <6>", fillcolor = white, shape = ellipse];
0.8 [style = filled, label = "expect(taskStorage.getStatus(\"id2\")).andReturn(Optional.of(TaskStatus.running(\"id2\"))).anyTimes(); <13>", fillcolor = white, shape = ellipse];
0.3 [style = filled, label = "final Task id3 = createKafkaIndexTask(\"id3\",DATASOURCE,0,new KafkaPartitions(topic,ImmutableMap.of(0,10L,1,20L,2,30L)),new KafkaPartitions(topic,ImmutableMap.of(0,Long.MAX_VALUE,1,Long.MAX_VALUE,2,Long.MAX_VALUE)),null,null); <8>", fillcolor = white, shape = ellipse];
0.14 [style = filled, label = "expect(taskClient.getStatusAsync(\"id1\")).andReturn(Futures.immediateFuture(READING)); <19>", fillcolor = white, shape = ellipse];
0.35 [style = filled, label = "verifyAll(); <41>", fillcolor = white, shape = ellipse];
0.30 [style = filled, label = "final Map<Integer,Long> fakeCheckpoints = Collections.emptyMap(); <35>", fillcolor = white, shape = ellipse];
0.33 [style = filled, label = "while  ( supervisor.getNoticesQueueSize() > 0 ) <38>", fillcolor = white, shape = diamond];
0.39 [style = filled, label = "Assert.assertNull(serviceEmitter.getExceptionMessage()); <46>", fillcolor = white, shape = ellipse];
0.41 [style = filled, label = "Enter <3...48>", fillcolor = aquamarine, shape = diamond];
0.13 [style = filled, label = "expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(new KafkaDataSourceMetadata(null)).anyTimes(); <18>", fillcolor = white, shape = ellipse];
0.34 [style = filled, label = "Thread.sleep(100); <39>", fillcolor = white, shape = ellipse];
0.25 [style = filled, label = "expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"id3\"),anyBoolean())).andReturn(Futures.immediateFuture(checkpoints)).times(1); <30>", fillcolor = white, shape = ellipse];
0.0 -> 0.1 [style = bold, label=""];
0.0 -> 0.28 [style = solid, label="supervisor"];
0.0 -> 0.29 [style = solid, label="supervisor"];
0.0 -> 0.31 [style = solid, label="supervisor"];
0.0 -> 0.32 [style = solid, label="supervisor"];
0.0 -> 0.33 [style = solid, label="supervisor"];
0.1 -> 0.2 [style = bold, label=""];
0.1 -> 0.6 [style = solid, label="id1"];
0.1 -> 0.10 [style = solid, label="id1"];
0.1 -> 0.32 [style = solid, label="id1"];
0.2 -> 0.3 [style = bold, label=""];
0.2 -> 0.6 [style = solid, label="id2"];
0.2 -> 0.11 [style = solid, label="id2"];
0.3 -> 0.4 [style = bold, label=""];
0.3 -> 0.6 [style = solid, label="id3"];
0.3 -> 0.12 [style = solid, label="id3"];
0.4 -> 0.5 [style = bold, label=""];
0.5 -> 0.6 [style = bold, label=""];
0.6 -> 0.7 [style = bold, label=""];
0.7 -> 0.8 [style = bold, label=""];
0.8 -> 0.9 [style = bold, label=""];
0.9 -> 0.10 [style = bold, label=""];
0.10 -> 0.11 [style = bold, label=""];
0.11 -> 0.12 [style = bold, label=""];
0.12 -> 0.13 [style = bold, label=""];
0.13 -> 0.14 [style = bold, label=""];
0.14 -> 0.15 [style = bold, label=""];
0.15 -> 0.16 [style = bold, label=""];
0.16 -> 0.17 [style = bold, label=""];
0.17 -> 0.18 [style = solid, label="startTime"];
0.17 -> 0.18 [style = bold, label=""];
0.17 -> 0.19 [style = solid, label="startTime"];
0.17 -> 0.20 [style = solid, label="startTime"];
0.18 -> 0.19 [style = bold, label=""];
0.19 -> 0.20 [style = bold, label=""];
0.20 -> 0.21 [style = bold, label=""];
0.21 -> 0.22 [style = solid, label="checkpoints"];
0.21 -> 0.22 [style = bold, label=""];
0.21 -> 0.23 [style = solid, label="checkpoints"];
0.21 -> 0.24 [style = solid, label="checkpoints"];
0.21 -> 0.25 [style = solid, label="checkpoints"];
0.21 -> 0.32 [style = solid, label="checkpoints"];
0.22 -> 0.23 [style = solid, label="checkpoints"];
0.22 -> 0.23 [style = bold, label=""];
0.22 -> 0.24 [style = solid, label="checkpoints"];
0.22 -> 0.25 [style = solid, label="checkpoints"];
0.22 -> 0.32 [style = solid, label="checkpoints"];
0.23 -> 0.24 [style = bold, label=""];
0.24 -> 0.25 [style = bold, label=""];
0.25 -> 0.26 [style = bold, label=""];
0.26 -> 0.27 [style = bold, label=""];
0.27 -> 0.28 [style = bold, label=""];
0.28 -> 0.29 [style = solid, label="supervisor"];
0.28 -> 0.29 [style = bold, label=""];
0.28 -> 0.31 [style = solid, label="supervisor"];
0.28 -> 0.32 [style = solid, label="supervisor"];
0.28 -> 0.33 [style = solid, label="supervisor"];
0.29 -> 0.30 [style = bold, label=""];
0.29 -> 0.31 [style = solid, label="supervisor"];
0.29 -> 0.32 [style = solid, label="supervisor"];
0.29 -> 0.33 [style = solid, label="supervisor"];
0.30 -> 0.31 [style = bold, label=""];
0.30 -> 0.32 [style = solid, label="fakeCheckpoints"];
0.31 -> 0.32 [style = solid, label="supervisor"];
0.31 -> 0.32 [style = bold, label=""];
0.31 -> 0.33 [style = solid, label="supervisor"];
0.32 -> 0.33 [style = solid, label="supervisor"];
0.32 -> 0.33 [style = bold, label=""];
0.33 -> 0.33 [style = solid, label="supervisor"];
0.33 -> 0.34 [style = dotted, label="true"];
0.33 -> 0.34 [style = bold, label=""];
0.33 -> 0.35 [style = bold, label=""];
0.34 -> 0.33 [style = bold, label=""];
0.35 -> 0.36 [style = bold, label=""];
0.36 -> 0.36 [style = solid, label="serviceEmitter"];
0.36 -> 0.37 [style = dotted, label="true"];
0.36 -> 0.37 [style = bold, label=""];
0.36 -> 0.38 [style = solid, label="serviceEmitter"];
0.36 -> 0.38 [style = bold, label=""];
0.36 -> 0.39 [style = solid, label="serviceEmitter"];
0.36 -> 0.40 [style = solid, label="serviceEmitter"];
0.37 -> 0.36 [style = bold, label=""];
0.38 -> 0.39 [style = bold, label=""];
0.39 -> 0.40 [style = bold, label=""];
0.41 -> 0.0 [style = dotted, label="true"];
0.41 -> 0.0 [style = bold, label=""];
0.41 -> 0.1 [style = dotted, label="true"];
0.41 -> 0.2 [style = dotted, label="true"];
0.41 -> 0.3 [style = dotted, label="true"];
0.41 -> 0.4 [style = dotted, label="true"];
0.41 -> 0.5 [style = dotted, label="true"];
0.41 -> 0.6 [style = dotted, label="true"];
0.41 -> 0.7 [style = dotted, label="true"];
0.41 -> 0.8 [style = dotted, label="true"];
0.41 -> 0.9 [style = dotted, label="true"];
0.41 -> 0.10 [style = dotted, label="true"];
0.41 -> 0.11 [style = dotted, label="true"];
0.41 -> 0.12 [style = dotted, label="true"];
0.41 -> 0.13 [style = dotted, label="true"];
0.41 -> 0.14 [style = dotted, label="true"];
0.41 -> 0.15 [style = dotted, label="true"];
0.41 -> 0.16 [style = dotted, label="true"];
0.41 -> 0.17 [style = dotted, label="true"];
0.41 -> 0.18 [style = dotted, label="true"];
0.41 -> 0.19 [style = dotted, label="true"];
0.41 -> 0.20 [style = dotted, label="true"];
0.41 -> 0.21 [style = dotted, label="true"];
0.41 -> 0.22 [style = dotted, label="true"];
0.41 -> 0.23 [style = dotted, label="true"];
0.41 -> 0.24 [style = dotted, label="true"];
0.41 -> 0.25 [style = dotted, label="true"];
0.41 -> 0.26 [style = dotted, label="true"];
0.41 -> 0.27 [style = dotted, label="true"];
0.41 -> 0.28 [style = dotted, label="true"];
0.41 -> 0.29 [style = dotted, label="true"];
0.41 -> 0.30 [style = dotted, label="true"];
0.41 -> 0.31 [style = dotted, label="true"];
0.41 -> 0.32 [style = dotted, label="true"];
0.41 -> 0.33 [style = dotted, label="true"];
0.41 -> 0.35 [style = dotted, label="true"];
0.41 -> 0.36 [style = dotted, label="true"];
0.41 -> 0.38 [style = dotted, label="true"];
0.41 -> 0.39 [style = dotted, label="true"];
0.41 -> 0.40 [style = dotted, label="true"];
}
