digraph PDG {
label = "should_insert_using_static_strategy_an_consistency_level <3...16>";
0.2 [style = filled, label = "final EntityWithStaticAnnotations entity = new EntityWithStaticAnnotations(id,\"new_val\",null); <7>", fillcolor = white, shape = ellipse];
0.1 [style = filled, label = "scriptExecutor.executeScriptTemplate(\"EntityWithStaticAnnotations/insert_single_row.cql\",ImmutableMap.of(\"id\",id)); <6>", fillcolor = white, shape = ellipse];
0.4 [style = filled, label = "logAsserter.prepareLogLevelForDriverConnection(); <9>", fillcolor = white, shape = ellipse];
0.8 [style = filled, label = "assertThat(actual.getString(\"value\")).isEqualTo(\"new_val\"); <13>", fillcolor = white, shape = ellipse];
0.5 [style = filled, label = "manager.crud().insert(entity).usingTimeToLive(1000).execute(); <10>", fillcolor = white, shape = ellipse];
0.10 [style = filled, label = "logAsserter.assertConsistencyLevels(LOCAL_ONE); <15>", fillcolor = deeppink, shape = ellipse];
0.0 [style = filled, label = "final long id = RandomUtils.nextLong(0L,Long.MAX_VALUE); <5>", fillcolor = white, shape = ellipse];
0.9 [style = filled, label = "assertThat(actual.getString(\"\"overRiden\"\")).isEqualTo(\"overriden_val\"); <14>", fillcolor = white, shape = ellipse];
0.11 [style = filled, label = "Enter <3...16>", fillcolor = aquamarine, shape = diamond];
0.3 [style = filled, label = "final CassandraLogAsserter logAsserter = new CassandraLogAsserter(); <8>", fillcolor = white, shape = ellipse];
0.6 [style = filled, label = "Row actual = session.execute( ( \"SELECT * FROM entity_static_annotations WHERE partition_key = \" + id )).one(); <11>", fillcolor = white, shape = ellipse];
0.7 [style = filled, label = "assertThat(actual).isNotNull(); <12>", fillcolor = white, shape = ellipse];
0.0 -> 0.1 [style = solid, label="id"];
0.0 -> 0.1 [style = bold, label=""];
0.0 -> 0.2 [style = solid, label="id"];
0.0 -> 0.6 [style = solid, label="id"];
0.1 -> 0.2 [style = bold, label=""];
0.2 -> 0.3 [style = bold, label=""];
0.2 -> 0.5 [style = solid, label="entity"];
0.3 -> 0.4 [style = solid, label="logAsserter"];
0.3 -> 0.4 [style = bold, label=""];
0.3 -> 0.10 [style = solid, label="logAsserter"];
0.4 -> 0.5 [style = bold, label=""];
0.4 -> 0.10 [style = solid, label="logAsserter"];
0.5 -> 0.6 [style = bold, label=""];
0.6 -> 0.7 [style = solid, label="actual"];
0.6 -> 0.7 [style = bold, label=""];
0.6 -> 0.8 [style = solid, label="actual"];
0.6 -> 0.9 [style = solid, label="actual"];
0.7 -> 0.8 [style = bold, label=""];
0.8 -> 0.9 [style = bold, label=""];
0.9 -> 0.10 [style = bold, label=""];
0.11 -> 0.0 [style = dotted, label="true"];
0.11 -> 0.0 [style = bold, label=""];
0.11 -> 0.1 [style = dotted, label="true"];
0.11 -> 0.2 [style = dotted, label="true"];
0.11 -> 0.3 [style = dotted, label="true"];
0.11 -> 0.4 [style = dotted, label="true"];
0.11 -> 0.5 [style = dotted, label="true"];
0.11 -> 0.6 [style = dotted, label="true"];
0.11 -> 0.7 [style = dotted, label="true"];
0.11 -> 0.8 [style = dotted, label="true"];
0.11 -> 0.9 [style = dotted, label="true"];
0.11 -> 0.10 [style = dotted, label="true"];
}
