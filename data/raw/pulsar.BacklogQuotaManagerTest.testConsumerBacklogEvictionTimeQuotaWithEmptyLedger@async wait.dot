digraph PDG {
label = "testConsumerBacklogEvictionTimeQuotaWithEmptyLedger <3...29>";
0.15 [style = filled, label = "TimeUnit.SECONDS.sleep(TIME_TO_CHECK_BACKLOG_QUOTA); <19>", fillcolor = white, shape = ellipse];
0.3 [style = filled, label = "final String topic = \"persistent\"; <7>", fillcolor = white, shape = ellipse];
0.7 [style = filled, label = "producer.send(new byte[][]); <11>", fillcolor = white, shape = ellipse];
0.0 [style = filled, label = "assertEquals(admin.namespaces().getBacklogQuotaMap(\"prop/ns-quota\"),Maps.newHashMap()); <4>", fillcolor = white, shape = ellipse];
0.2 [style = filled, label = "PulsarClient client = PulsarClient.builder().serviceUrl(adminUrl.toString()).statsInterval(0,TimeUnit.SECONDS).build(); <6>", fillcolor = white, shape = ellipse];
0.11 [style = filled, label = "assertEquals(internalStats.ledgers.size(),2); <15>", fillcolor = white, shape = ellipse];
0.18 [style = filled, label = "Enter <3...29>", fillcolor = aquamarine, shape = diamond];
0.5 [style = filled, label = "Consumer<byte[]> consumer = client.newConsumer().topic(topic).subscriptionName(subName).subscribe(); <9>", fillcolor = white, shape = ellipse];
0.17 [style = filled, label = "client.close(); <28>", fillcolor = deeppink, shape = ellipse];
0.9 [style = filled, label = "admin.topics().unload(topic); <13>", fillcolor = white, shape = ellipse];
0.1 [style = filled, label = "admin.namespaces().setBacklogQuota(\"prop/ns-quota\",BacklogQuota.builder().limitTime(TIME_TO_CHECK_BACKLOG_QUOTA).retentionPolicy(consumer_backlog_eviction).build(),message_age); <5>", fillcolor = white, shape = ellipse];
0.6 [style = filled, label = "Producer<byte[]> producer = createProducer(client,topic); <10>", fillcolor = white, shape = ellipse];
0.12 [style = filled, label = "assertEquals(internalStats.ledgers.get(1).entries,0); <16>", fillcolor = white, shape = ellipse];
0.13 [style = filled, label = "TopicStats stats = admin.topics().getStats(topic); <17>", fillcolor = white, shape = ellipse];
0.16 [style = filled, label = "Awaitility.await().pollInterval(Duration.ofSeconds(1)).atMost(Duration.ofSeconds(TIME_TO_CHECK_BACKLOG_QUOTA)).untilAsserted(null); <20...27>", fillcolor = white, shape = ellipse];
0.10 [style = filled, label = "PersistentTopicInternalStats internalStats = admin.topics().getInternalStats(topic); <14>", fillcolor = white, shape = ellipse];
0.8 [style = filled, label = "consumer.receive(); <12>", fillcolor = white, shape = ellipse];
0.14 [style = filled, label = "assertEquals(stats.getSubscriptions().get(subName).getMsgBacklog(),1); <18>", fillcolor = white, shape = ellipse];
0.4 [style = filled, label = "final String subName = \"c1\"; <8>", fillcolor = white, shape = ellipse];
0.0 -> 0.1 [style = bold, label=""];
0.1 -> 0.2 [style = bold, label=""];
0.2 -> 0.3 [style = bold, label=""];
0.2 -> 0.5 [style = solid, label="client"];
0.2 -> 0.6 [style = solid, label="client"];
0.2 -> 0.17 [style = solid, label="client"];
0.3 -> 0.4 [style = bold, label=""];
0.3 -> 0.5 [style = solid, label="topic"];
0.3 -> 0.6 [style = solid, label="topic"];
0.3 -> 0.9 [style = solid, label="topic"];
0.3 -> 0.10 [style = solid, label="topic"];
0.3 -> 0.13 [style = solid, label="topic"];
0.4 -> 0.5 [style = solid, label="subName"];
0.4 -> 0.5 [style = bold, label=""];
0.4 -> 0.14 [style = solid, label="subName"];
0.5 -> 0.6 [style = bold, label=""];
0.5 -> 0.8 [style = solid, label="consumer"];
0.6 -> 0.7 [style = solid, label="producer"];
0.6 -> 0.7 [style = bold, label=""];
0.7 -> 0.8 [style = bold, label=""];
0.8 -> 0.9 [style = bold, label=""];
0.9 -> 0.10 [style = bold, label=""];
0.10 -> 0.11 [style = bold, label=""];
0.11 -> 0.12 [style = bold, label=""];
0.12 -> 0.13 [style = bold, label=""];
0.13 -> 0.14 [style = solid, label="stats"];
0.13 -> 0.14 [style = bold, label=""];
0.14 -> 0.15 [style = bold, label=""];
0.15 -> 0.16 [style = bold, label=""];
0.16 -> 0.17 [style = bold, label=""];
0.18 -> 0.0 [style = dotted, label="true"];
0.18 -> 0.0 [style = bold, label=""];
0.18 -> 0.1 [style = dotted, label="true"];
0.18 -> 0.2 [style = dotted, label="true"];
0.18 -> 0.3 [style = dotted, label="true"];
0.18 -> 0.4 [style = dotted, label="true"];
0.18 -> 0.5 [style = dotted, label="true"];
0.18 -> 0.6 [style = dotted, label="true"];
0.18 -> 0.7 [style = dotted, label="true"];
0.18 -> 0.8 [style = dotted, label="true"];
0.18 -> 0.9 [style = dotted, label="true"];
0.18 -> 0.10 [style = dotted, label="true"];
0.18 -> 0.11 [style = dotted, label="true"];
0.18 -> 0.12 [style = dotted, label="true"];
0.18 -> 0.13 [style = dotted, label="true"];
0.18 -> 0.14 [style = dotted, label="true"];
0.18 -> 0.15 [style = dotted, label="true"];
0.18 -> 0.16 [style = dotted, label="true"];
0.18 -> 0.17 [style = dotted, label="true"];
}
