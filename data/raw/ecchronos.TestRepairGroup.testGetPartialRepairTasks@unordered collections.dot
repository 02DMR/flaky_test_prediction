digraph PDG {
label = "testGetPartialRepairTasks <3...21>";
0.2 [style = filled, label = "ImmutableList<LongTokenRange> vnodes = ImmutableList.of(new LongTokenRange(1,2),new LongTokenRange(2,3),new LongTokenRange(4,5)); <6>", fillcolor = white, shape = ellipse];
0.12 [style = filled, label = "repairTaskRanges.add(range); <15>", fillcolor = white, shape = ellipse];
0.4 [style = filled, label = "RepairGroup repairGroup = builderFor(replicaRepairGroup).build(priority); <8>", fillcolor = white, shape = ellipse];
0.11 [style = filled, label = "LongTokenRange range = repairTask.getTokenRanges().iterator().next(); <14>", fillcolor = white, shape = ellipse];
0.6 [style = filled, label = "assertThat(tasks.size()).isEqualTo(3); <10>", fillcolor = white, shape = ellipse];
0.16 [style = filled, label = "assertThat(repairTaskRanges).containsExactlyElementsOf(vnodes); <20>", fillcolor = deeppink, shape = ellipse];
0.14 [style = filled, label = "assertThat(repairTask.getTableReference()).isEqualTo(tableReference); <17>", fillcolor = white, shape = ellipse];
0.0 [style = filled, label = "Node node = mockNode(\"DC1\"); <4>", fillcolor = white, shape = ellipse];
0.5 [style = filled, label = "Collection<RepairTask> tasks = repairGroup.getRepairTasks(); <9>", fillcolor = white, shape = ellipse];
0.13 [style = filled, label = "assertThat(repairTask.getReplicas()).containsExactlyInAnyOrder(node,node2); <16>", fillcolor = white, shape = ellipse];
0.3 [style = filled, label = "ReplicaRepairGroup replicaRepairGroup = new ReplicaRepairGroup(ImmutableSet.of(node,node2),vnodes); <7>", fillcolor = white, shape = ellipse];
0.8 [style = filled, label = "RepairTask repairTask <12>", fillcolor = tomato, shape = box];
0.10 [style = filled, label = "assertThat(repairTask.getTokenRanges().size()).isEqualTo(1); <13>", fillcolor = white, shape = ellipse];
0.17 [style = filled, label = "Enter <3...21>", fillcolor = aquamarine, shape = diamond];
0.7 [style = filled, label = "Set<LongTokenRange> repairTaskRanges = new HashSet<>(); <11>", fillcolor = white, shape = ellipse];
0.9 [style = filled, label = "tasks <12>", fillcolor = white, shape = ellipse];
0.15 [style = filled, label = "assertThat(repairTask.getRepairConfiguration().getRepairParallelism()).isEqualTo(PARALLEL); <18>", fillcolor = white, shape = ellipse];
0.1 [style = filled, label = "Node node2 = mockNode(\"DC1\"); <5>", fillcolor = white, shape = ellipse];
0.0 -> 0.1 [style = bold, label=""];
0.0 -> 0.3 [style = solid, label="node"];
0.0 -> 0.13 [style = solid, label="node"];
0.1 -> 0.2 [style = bold, label=""];
0.1 -> 0.3 [style = solid, label="node2"];
0.1 -> 0.13 [style = solid, label="node2"];
0.2 -> 0.3 [style = solid, label="vnodes"];
0.2 -> 0.3 [style = bold, label=""];
0.2 -> 0.16 [style = solid, label="vnodes"];
0.3 -> 0.4 [style = solid, label="replicaRepairGroup"];
0.3 -> 0.4 [style = bold, label=""];
0.4 -> 0.5 [style = solid, label="repairGroup"];
0.4 -> 0.5 [style = bold, label=""];
0.5 -> 0.6 [style = solid, label="tasks"];
0.5 -> 0.6 [style = bold, label=""];
0.6 -> 0.7 [style = bold, label=""];
0.7 -> 0.10 [style = bold, label=""];
0.7 -> 0.12 [style = solid, label="repairTaskRanges"];
0.7 -> 0.16 [style = solid, label="repairTaskRanges"];
0.10 -> 0.11 [style = bold, label=""];
0.11 -> 0.12 [style = solid, label="range"];
0.11 -> 0.12 [style = bold, label=""];
0.12 -> 0.12 [style = solid, label="repairTaskRanges"];
0.12 -> 0.13 [style = bold, label=""];
0.12 -> 0.16 [style = solid, label="repairTaskRanges"];
0.13 -> 0.14 [style = bold, label=""];
0.14 -> 0.15 [style = bold, label=""];
0.15 -> 0.10 [style = bold, label=""];
0.15 -> 0.16 [style = bold, label=""];
0.17 -> 0.0 [style = dotted, label="true"];
0.17 -> 0.0 [style = bold, label=""];
0.17 -> 0.1 [style = dotted, label="true"];
0.17 -> 0.2 [style = dotted, label="true"];
0.17 -> 0.3 [style = dotted, label="true"];
0.17 -> 0.4 [style = dotted, label="true"];
0.17 -> 0.5 [style = dotted, label="true"];
0.17 -> 0.6 [style = dotted, label="true"];
0.17 -> 0.7 [style = dotted, label="true"];
0.17 -> 0.8 [style = dotted, label="true"];
0.17 -> 0.9 [style = dotted, label="true"];
0.17 -> 0.10 [style = dotted, label="true"];
0.17 -> 0.11 [style = dotted, label="true"];
0.17 -> 0.12 [style = dotted, label="true"];
0.17 -> 0.13 [style = dotted, label="true"];
0.17 -> 0.14 [style = dotted, label="true"];
0.17 -> 0.15 [style = dotted, label="true"];
0.17 -> 0.16 [style = dotted, label="true"];
}
